// Generated by CoffeeScript 1.6.3
/*
© Copyright 2013 Stephan Jorek <stephan.jorek@gmail.com>
© Copyright 2006 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.
*/


(function() {
  var NativeJavascriptCompiler, constants, root;

  constants = require('goatee/Core/Constants');

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  /*
  NativeJavascriptCompiler
  
  @memberOf goatee
  */


  root.NativeJavascriptCompiler = NativeJavascriptCompiler = (function() {
    var evaluateToSelf, _evaluateToFunctionCache;

    function NativeJavascriptCompiler() {}

    NativeJavascriptCompiler.prototype.evaluateExpression = function(expression) {
      var e;
      try {
        /*
        NOTE(mesch): An alternative idiom would be:
        
          eval('(' + expr + ')');
        
        Note that using the square brackets as below, "" evals to undefined.
        The alternative of using parentheses does not work when evaluating
        function literals in IE.
        e.g. eval("(function() {})") returns undefined, and not a function
        object, in IE.
        
        NOTE(sjorek): Due to the underlying coffescript-specific language
        agnostics we deliberatly fall back to vanilla javascript here.
        */

        return eval('[' + expression + '][0]');
      } catch (_error) {
        e = _error;
        console.log("Failed to evaluate “" + expression + "”: " + e);
      }
      return null;
    };

    _evaluateToFunctionCache = {};

    NativeJavascriptCompiler.prototype.evaluateToFunction = function(expression) {
      var e;
      if (_evaluateToFunctionCache[expression] == null) {
        return _evaluateToFunctionCache[expression];
      }
      try {
        return _evaluateToFunctionCache[expression] = new Function(constants.STRING_variables, constants.STRING_data, constants.STRING_with + expression);
      } catch (_error) {
        e = _error;
        console.log("Failed to evalaluate “" + expression + "” to function: " + e);
      }
      return null;
    };

    evaluateToSelf = function(expression) {
      return expression;
    };

    NativeJavascriptCompiler.prototype.evaluateToFunctions = function(expressions) {
      var colon, expression, key, result, value, _i, _len, _ref;
      result = [];
      _ref = expressions.split(constants.REGEXP_semicolon);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        expression = _ref[_i];
        colon = expression.indexOf(constants.CHAR_colon);
        if (colon < 0) {
          continue;
        }
        key = stringTrim(expression.substr(0, colon));
        value = this.evaluateToFunction(expression.substr(colon + 1));
        result.push(key, value);
      }
      return result;
    };

    NativeJavascriptCompiler.prototype.evaluateToClosures = function(expressions) {
      var expression, _i, _len, _ref, _results;
      _ref = expressions.split(constants.REGEXP_semicolon);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        expression = _ref[_i];
        if (expression) {
          _results.push(this.evaluateToFunction(expression));
        }
      }
      return _results;
    };

    return NativeJavascriptCompiler;

  })();

}).call(this);
