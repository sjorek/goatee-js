// Generated by CoffeeScript 1.6.3
/*
© Copyright 2013 Stephan Jorek <stephan.jorek@gmail.com>
© Copyright 2006 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.
*/


/*

Order of Evaluation
===================

Goatee instruction attributes and event instructions within a single element are
evaluated in the following order:

Outer Processors
-------------------

Outer processors operate on the tag only. Not on its attributes, but on aspects
like automation, recursion or multiplicity.

• render        This instruction initiates the rendering automatically, after the
                dom is ready. The algorithm uses the given “render”-data as
                Context. Additionally if “jQuery” is available and the given
                data is a string, “render” may be either an global javascript
                variable reference, or if that fails an url to an external json-
                file. Changes to the render value, will stop any process 
                rendering the same tag and start re-rendering. The rendering-
                process will skip all nested tags which it-self contain a
                “render”-Attribute, hence any of those tags will be processed
                automatically in the order of their appearance.

• source        Formerly “transclude”. If a “source” instruction is present no
                further instructions are processed. Additionally if either “Sizzle”, 
                “cheerio” or “jQuery” is available, “source” may be an internal
                template-reference, like in
                   `(jQuery||cheerio||Sizzle)( 'source #id .selector', this )`
                or if “jQuery” is available also an external reference, like in
                   `jQuery(this).load( 'http://source.url #element-id'” );`.

• list          Formerly “jsselect”. If “list” is array-valued, remaining
                instructions will be copied to each new duplicate element created
                by the “list” and processed when the further dom-traversal
                visits the new elements. If “json:select” is available and
                “list” is a String, it is used as css3-like query onto the
                current context. Therefore the context must be suiteable as 2nd
                argument of “JSONSelect.match”. @see http://jsonselect.org

Inner Processors
-------------------

Inner processors operate on tag element-attributes, -properties and -methods as
well as the context-data, -variables and -values.

• display       Formerly “jsdisplay”.

• set           Formerly “jsvars”.

• alter         Formerly “jsvalues”.

• exec(ute)     Formerly “jseval”.

• skip          Formerly “jsskip”.

• markup        This instruction is present if `(cheerio|jQuery)(…).html()` is
                available.

• text          Formerly “jscontent”. Uses `(cheerio|jQuery)(…).text()` if
                available, otherwise Node.innerHTML will be assigned to given
                content.

• next          This instruction is present if `(cheerio|jQuery)(…).next()` is
                available.
*/


(function() {
  var Processor, cache, constant, doc, root, utility;

  constant = require('goatee/Core/Constants');

  utility = require('goatee/Core/Utility');

  doc = require('goatee/Dom/Document');

  cache = require('goatee/Cache/Composite');

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Processor = Processor = (function() {
    var _id, _instructions, _list, _sources, _values;

    function Processor() {}

    Processor.prototype.run = function(f) {
      var arg1, arg2, arrays, calls, index, indices, method, queue, self;
      self = this;
      calls = self.calls = [];
      indices = self.indices = [];
      arrays = self.arrays = [];
      f();
      while (calls.length > 0) {
        queue = calls[calls.length - 1];
        index = indices[indices.length - 1];
        if (index >= queue.length) {
          self.recycleArray(calls.pop());
          indices.pop();
          continue;
        }
        method = queue[index++];
        arg1 = queue[index++];
        arg2 = queue[index++];
        indices[indices.length - 1] = index;
        method.call(self, arg1, arg2);
      }
    };

    Processor.prototype.push = function(args) {
      this.calls.push(args);
      this.indices.push(0);
    };

    Processor.prototype.setup = function(template) {
      var self;
      if (this.getCacheProperty(template) == null) {
        self = this;
        doc.traverseElements(template, function(node) {
          return self.prepare(node);
        });
      }
    };

    Processor.prototype.instructions = [];

    Processor.prototype.prepare = function(node) {
      var id, list, source, values, _ref, _ref1;
      cache = this.getCacheProperty(node);
      if (cache != null) {
        return cache;
      }
      id = this.getElementIdentifier(node);
      if (id != null) {
        cache = this.getCache(id);
        if (cache != null) {
          return this.setCacheProperty(node, cache);
        }
      }
      _ref = this.collect(node), list = _ref[0], values = _ref[1];
      if (list.length === 0) {
        return this.setEmpty(node);
      }
      source = list.join(constant.CHAR_ampersand);
      id = this.getSourceIdentifier(source);
      if (id != null) {
        cache = this.getCache(id);
        if (cache != null) {
          this.setElementIdentifier(node, id);
          return this.setCacheProperty(node, cache);
        }
      }
      _ref1 = this.build(node, values), cache = _ref1[0], id = _ref1[1];
      this.setCache(id, cache);
      this.setElementIdentifier(node, id);
      this.setSourceIdentifier(source, id);
      return this.setCacheProperty(node, cache);
    };

    _list = [];

    _values = {};

    Processor.prototype.collect = function(node) {
      var name, value, _i, _len, _ref;
      utility.clearArray(_list);
      _ref = this.instructions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i][0];
        value = doc.getAttribute(node, name);
        _values[name] = value;
        if (value != null) {
          _list.push(name + "=" + value);
        }
      }
      return [_list, _values];
    };

    _id = 0;

    Processor.prototype.build = function(node, values) {
      var instructions, name, parse, value, _i, _len, _ref, _ref1, _ref2;
      cache = {};
      _ref = this.instructions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], name = _ref1[0], parse = _ref1[1];
        value = values[name];
        if (value == null) {
          continue;
        }
        cache[name] = parse(value);
        if (constant.DEBUG) {
          instructions = (_ref2 = cache.instructions) != null ? _ref2 : {};
          instructions[name] = value;
        }
      }
      return [cache, constant.STRING_empty + ++_id];
    };

    Processor.prototype.getCacheProperty = function(node) {
      return node[constant.PROP_jstcache];
    };

    Processor.prototype.setCacheProperty = function(node, instructions) {
      return node[constant.PROP_jstcache] = instructions;
    };

    _instructions = {
      0: {}
    };

    Processor.prototype.getCache = function(id) {
      return _instructions[id];
    };

    Processor.prototype.setCache = function(id, instructions) {
      return _instructions[id] = instructions;
    };

    Processor.prototype.getElementIdentifier = function(node) {
      return doc.getAttribute(node, constant.ATT_jstcache);
    };

    Processor.prototype.setElementIdentifier = function(node, id) {
      doc.setAttribute(node, constant.ATT_jstcache, id);
      return id;
    };

    _sources = {};

    Processor.prototype.getSourceIdentifier = function(source) {
      return _sources[source];
    };

    Processor.prototype.setSourceIdentifier = function(source, id) {
      return _sources[source] = id;
    };

    Processor.prototype.setEmpty = function(node) {
      doc.setAttribute(node, constant.ATT_jstcache, constant.STRING_zero);
      return this.setCacheProperty(_instructions[0]);
    };

    return Processor;

  })();

}).call(this);
