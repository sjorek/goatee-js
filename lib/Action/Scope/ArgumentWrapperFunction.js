// Generated by CoffeeScript 1.6.3
(function() {
  var ArgumentWrapperFunction, CHAR_comma, WithStatementFunction, root,
    __slice = [].slice;

  CHAR_comma = require('../../Core/Constants').Constants.CHAR_comma;

  WithStatementFunction = require('./WithStatementFunction').WithStatementFunction;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.ArgumentWrapperFunction = ArgumentWrapperFunction = (function() {
    var _cache;

    function ArgumentWrapperFunction() {}

    _cache = {};

    ArgumentWrapperFunction.prototype.bind = function() {
      var code, object, scope;
      code = arguments[0], object = arguments[1], scope = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return this.build(code).apply(object, scope);
    };

    ArgumentWrapperFunction.prototype.build = function(code) {
      var self;
      self = this;
      return function(scope) {
        var args, key, map, object, vals, _i, _len;
        map = {};
        args = [];
        vals = [];
        for (_i = 0, _len = scope.length; _i < _len; _i++) {
          object = scope[_i];
          for (key in object) {
            if (map[key] != null) {
              continue;
            }
            map[key] = args.length;
            args.push(key);
            vals.push(object[key]);
          }
        }
        return self.compile(args, code).apply(this, vals);
      };
    };

    ArgumentWrapperFunction.prototype.compile = function(args, code) {
      var fn, id;
      id = "(" + (args.join(',')) + ") -> " + code;
      if ((fn = _cache[id]) != null) {
        return fn;
      }
      args.push("return " + code);
      return _cache[id] = Function.apply(null, args);
    };

    return ArgumentWrapperFunction;

  })();

}).call(this);
