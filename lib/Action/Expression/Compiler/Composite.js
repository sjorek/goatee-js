// Generated by CoffeeScript 1.6.3
/*
© Copyright 2013 Stephan Jorek <stephan.jorek@gmail.com>
© Copyright 2006 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.
*/


(function() {
  var Javascript, STRING_data, STRING_variables, STRING_with, parse, root, trim, _instance, _ref;

  _ref = require('../../Core/Constants').Constants, STRING_variables = _ref.STRING_variables, STRING_data = _ref.STRING_data, STRING_with = _ref.STRING_with;

  parse = require('../../Map/UnorderedRules').UnorderedRules.parse;

  trim = require('../../Core/Utility').Utility.trim;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  /*
  Javascript
  
  @class
  @namespace goatee.Action.Compiler
  */


  root.Javascript = Javascript = (function() {
    var evaluateToSelf, _evaluateToFunctionCache;

    function Javascript() {}

    Javascript.prototype.evaluate = function(expression) {
      var e;
      try {
        this.evaluateExpression(expression);
      } catch (_error) {
        e = _error;
        console.log("Failed to evaluate “" + expression + "”: " + e);
      }
      return null;
    };

    Javascript.prototype.evaluateExpression = function(expression) {
      /*
      NOTE(mesch): An alternative idiom would be:
      
        eval('(' + expr + ')');
      
      Note that using the square brackets as below, "" evals to undefined.
      The alternative of using parentheses does not work when evaluating
      function literals in IE.
      e.g. eval("(function() {})") returns undefined, and not a function
      object, in IE.
      
      NOTE(sjorek): Due to the underlying coffescript-specific language
      agnostics we deliberatly fall back to vanilla javascript here.
      */

      return eval('[' + expression + '][0]');
    };

    _evaluateToFunctionCache = {};

    Javascript.prototype.evaluateToFunction = function(expression) {
      var e;
      if (_evaluateToFunctionCache[expression] == null) {
        return _evaluateToFunctionCache[expression];
      }
      try {
        return _evaluateToFunctionCache[expression] = Function(STRING_variables, STRING_data, STRING_with + expression);
      } catch (_error) {
        e = _error;
        console.log("Failed to evalaluate “" + expression + "” to function: " + e);
      }
      return null;
    };

    evaluateToSelf = function(expression) {
      return expression;
    };

    Javascript.prototype.evaluateToFunctions = function(expressions) {
      var colon, expression, key, result, value, _i, _len, _ref1;
      result = [];
      _ref1 = expressions.split(Constants.REGEXP_semicolon);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        expression = _ref1[_i];
        colon = expression.indexOf(Constants.CHAR_colon);
        if (colon < 0) {
          continue;
        }
        key = trim(expression.substr(0, colon));
        value = this.evaluateToFunction(expression.substr(colon + 1));
        result.push(key, value);
      }
      return result;
    };

    Javascript.prototype.evaluateToRules = function(expressions, _rules) {
      var collect, result, self;
      self = this;
      _rules = parse(expressions, _rules);
      result = [];
      collect = function(key, value, priority) {
        return result.push(key, self.evaluateToFunction(value));
      };
      _rules.each(collect);
      return result;
    };

    Javascript.prototype.evaluateToClosures = function(expressions) {
      var expression, _i, _len, _ref1, _results;
      _ref1 = expressions.split(Constants.REGEXP_semicolon);
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        expression = _ref1[_i];
        if (expression) {
          _results.push(this.evaluateToFunction(expression));
        }
      }
      return _results;
    };

    return Javascript;

  })();

  _instance = Javascript.instance = null;

  Javascript.get = function() {
    return _instance != null ? _instance : (_instance = new Javascript);
  };

}).call(this);
