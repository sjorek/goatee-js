// Generated by CoffeeScript 1.6.3
/*
Â© Copyright 2013 Stephan Jorek <stephan.jorek@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.
*/


(function() {
  var $1, $2, $3, Expression, Parser, alt, alternatives, bnf, bop, grammar, name, o, parser, r, root, token, tokens, unwrap, _ref,
    __hasProp = {}.hasOwnProperty;

  Parser = require('jison').Parser;

  Expression = require('./Expression').Expression;

  root = (_ref = typeof module !== "undefined" && module !== null ? module.exports : void 0) != null ? _ref : this;

  $1 = $2 = $3 = null;

  unwrap = /^function\s*\(\)\s*\{\s*return\s*([\s\S]*);\s*\}/;

  r = function(patternString, action) {
    var match;
    if (patternString.source != null) {
      patternString = patternString.source;
    }
    if (!action) {
      return [patternString, 'return;'];
    }
    action = (match = unwrap.exec(action)) ? match[1] : "(" + action + "())";
    return [patternString, "return " + action + ";"];
  };

  o = function(patternString, action, options) {
    var match;
    if (!action) {
      return [patternString, '$$ = $1;', options];
    }
    action = (match = unwrap.exec(action)) ? match[1] : "(" + action + "())";
    return [patternString, "$$ = " + action + ";", options];
  };

  bop = function(op) {
    return o('Expression ' + op + ' Expression', function() {
      return new yy.Expression($2, [$1, $3]);
    });
  };

  root.grammar = grammar = {
    header: 'var global = (function(){return this;})()\nrequire(\'./Expression\');\nExpression = global.goatee.Expression;\n',
    footer: '\nExpression.parse = (function() {\n    var cache = {}\n    return function(code) {\n        if (cache.hasOwnProperty(code)) {\n            return cache[string]\n        }\n        var expression = parser.parse(code)\n        return cache[code] = cache[expression.toString()] = expression\n    }\n})()\nif (typeof module !== \'undefined\')\n    module.exports = Expression.parse',
    comment: 'Goatee Expression Parser',
    lex: {
      rules: [
        r(/\s+/, function() {}), r(/0[xX][a-fA-F0-9]+\b/, function() {
          return 'NUMBER';
        }), r(/([1-9][0-9]+|[0-9])(\.[0-9]+)?([eE][-+]?[0-9]+)?\b/, function() {
          return 'NUMBER';
        }), r(/return\b/, function() {
          return 'RETURN';
        }), r(/if\b/, function() {
          return 'IF';
        }), r(/else\b/, function() {
          return 'ELSE';
        }), r(/null\b/, function() {
          return 'NULL';
        }), r(/true\b/, function() {
          return 'TRUE';
        }), r(/false\b/, function() {
          return 'FALSE';
        }), r(/new\b/, function() {
          return 'NEW';
        }), r(/[@$.:]/, function() {
          return 'CONTEXT';
        }), r(/[a-zA-Z_$]\w*/, function() {
          return 'REFERENCE';
        }), r(/"(\\x[a-fA-F0-9]{2}|\\u[a-fA-F0-9]{4}|\\[^xu]|[^\\"])*"/, function() {
          return 'STRING';
        }), r(/'(\\[\/'\\bfnrt]|\\u[a-fA-F0-9]{4}|[^\\'])*'/, function() {
          return 'STRING';
        }), r(/\/\*(?:.|[\r\n])*?\*\//, function() {}), r('\\.', function() {
          return '.';
        }), r('\\[', function() {
          return '[';
        }), r('\\]', function() {
          return ']';
        }), r('\\(', function() {
          return '(';
        }), r('\\)', function() {
          return ')';
        }), r('\\*', function() {
          return '*';
        }), r('\\/', function() {
          return '/';
        }), r('%', function() {
          return '%';
        }), r('-', function() {
          return '-';
        }), r('\\+', function() {
          return '+';
        }), r('===', function() {
          return '===';
        }), r('!==', function() {
          return '!==';
        }), r('==', function() {
          return '==';
        }), r('!=', function() {
          return '!=';
        }), r('<=', function() {
          return '<=';
        }), r('>=', function() {
          return '>=';
        }), r('<', function() {
          return '<';
        }), r('>', function() {
          return '>';
        }), r('=', function() {
          return '=';
        }), r('-=', function() {
          return '-=';
        }), r('\\+=', function() {
          return '+=';
        }), r('\\*=', function() {
          return '*=';
        }), r('\\/=', function() {
          return '/=';
        }), r('<<=', function() {
          return '<<=';
        }), r('>>=', function() {
          return '>>=';
        }), r('>>>=', function() {
          return '>>>=';
        }), r('&=', function() {
          return '&=';
        }), r('\\^=', function() {
          return '^=';
        }), r('\\|=', function() {
          return '|=';
        }), r('%=', function() {
          return '%=';
        }), r('\\&\\&', function() {
          return '&&';
        }), r('\\|\\|', function() {
          return '||';
        }), r('\\?', function() {
          return '?';
        }), r(':', function() {
          return ':';
        }), r(';', function() {
          return ';';
        }), r(',', function() {
          return ',';
        }), r('{', function() {
          return '{';
        }), r('}', function() {
          return '}';
        }), r('!', function() {
          return '!';
        }), r('$', function() {
          return 'EOF';
        })
      ]
    },
    operators: [['left', '.', '[', ']'], ['left', '(', ')'], ['right', '!'], ['left', '*', '/', '%'], ['left', '+', '-'], ['left', '<=', '>=', '<', '>'], ['left', '===', '!==', '==', '!='], ['left', '&&'], ['left', '||'], ['right', '?', ':'], ['left', '*=', '/=', '%='], ['left', '+=', '-='], ['left', '='], ['left', ',']].reverse(),
    startSymbol: 'Root'
  };

  grammar.bnf = bnf = {
    Root: [
      r('EOF', function() {
        return null;
      }), r('Statements EOF', function() {
        if ($1 === yy.Empty) {
          return null;
        } else {
          return $1;
        }
      }), r('Statements', function() {
        if ($1 === yy.Empty) {
          return null;
        } else {
          return $1;
        }
      })
    ],
    Parameters: [
      o('', function() {
        return [];
      }), o('Expression', function() {
        return [$1];
      }), o('Parameters , Expression', function() {
        return $1.concat($3);
      })
    ],
    Key: [
      o('Primitive', function() {
        return $1;
      }), o('Identifier', function() {
        return $1;
      })
    ],
    KeyValue: [
      o('Key : Expression', function() {
        return [$1, $3];
      })
    ],
    KeyValues: [
      o('', function() {
        return [];
      }), o('KeyValue', function() {
        return $1;
      }), o('KeyValues , KeyValue', function() {
        return $1.concat($3);
      })
    ],
    Object: [
      o('{ KeyValues }', function() {
        return new yy.Expression('object', $2);
      })
    ],
    Elements: [
      o('', function() {
        return [];
      }), o('Expression', function() {
        return [$1];
      }), o('Elements , Expression', function() {
        return $1.concat($3);
      })
    ],
    Array: [
      o('[ Elements ]', function() {
        return new yy.Expression('array', $2);
      })
    ],
    Assign: [o('='), o('-='), o('+='), o('*='), o('/='), o('<<='), o('>>='), o('>>>='), o('&='), o('^='), o('|='), o('%=')],
    Statements: [
      o('Statement'), o('Statements Statement', function() {
        if ($1 === yy.Empty) {
          if ($2 === yy.Empty) {
            return yy.Empty;
          } else {
            return new yy.Expression('block', [$2]);
          }
        } else if ($1.operator.name === 'block') {
          if ($2 !== yy.Empty) {
            $1.parameters.push($2);
          }
          return $1;
        } else if ($2 === yy.Empty) {
          return new yy.Expression('block', [$1]);
        } else {
          return new yy.Expression('block', [$1, $2]);
        }
      })
    ],
    Statement: [o('EmptyStatement'), o('ExpressionStatement'), o('ConditionalStatement'), o('AssignStatement')],
    Block: [
      o('{ Statements }', function() {
        if ($2 === yy.Empty) {
          return null;
        } else {
          return $2;
        }
      })
    ],
    EmptyStatement: [
      o(';', function() {
        return yy.Empty;
      })
    ],
    ExpressionStatement: [o('Expression ;'), o('Expression EOF')],
    ConditionalStatement: [o('Conditional ;'), o('Conditional EOF')],
    AssignStatement: [
      o('Identifier Assign ExpressionStatement', function() {
        return new yy.Expression($2, [$1, $3]);
      })
    ],
    Conditional: [
      o('IF ( Expression ) Block ELSE Conditional', function() {
        return new yy.Expression('if', [$3, $5, $7]);
      }), o('IF ( Expression ) Block ELSE Block', function() {
        return new yy.Expression('if', [$3, $5, $7]);
      }), o('IF ( Expression ) Block', function() {
        return new yy.Expression('if', [$3, $5]);
      })
    ],
    Primitive: [
      o('NUMBER', function() {
        return Number($1);
      }), o('- NUMBER', function() {
        return -Number($2);
      }), o('NULL', function() {
        return null;
      }), o('TRUE', function() {
        return true;
      }), o('FALSE', function() {
        return false;
      }), o('STRING', function() {
        return yy.escapeString($1);
      })
    ],
    Math: [bop('*'), bop('/'), bop('%'), bop('+'), bop('-')],
    Boolean: [
      o('! Expression', function() {
        return new yy.Expression('!', [$2]);
      }), bop('<='), bop('>='), bop('<'), bop('>'), bop('==='), bop('!=='), bop('=='), bop('!='), bop('&&'), bop('||')
    ],
    Literal: [
      o('Object', function() {
        return $1;
      }), o('Array', function() {
        return $1;
      }), o('Primitive', function() {
        return new yy.Expression('primitive', [$1]);
      })
    ],
    Identifier: [
      o('REFERENCE', function() {
        return $1;
      })
    ],
    Scope: [
      o('CONTEXT', function() {
        return new yy.Expression('context', $1);
      })
    ],
    Reference: [
      o('Identifier', function() {
        return new yy.Expression('reference', [$1]);
      }), o('Scope Identifier', function() {
        return new yy.Expression('.', [$1, $2]);
      }), o('Scope', function() {
        return $1;
      })
    ],
    Path: [
      o('Expression . Identifier', function() {
        return new yy.Expression($2, [$1, new yy.Expression('reference', [$3])]);
      })
    ],
    Expression: [
      o('Expression ? Expression : Expression', function() {
        return new yy.Expression('?:', [$1, $3, $5]);
      }), o('Expression ( Parameters )', function() {
        return new yy.Expression('()', [$1].concat($3));
      }), o('Expression [ Expression ]', function() {
        return new yy.Expression('[]', [$1, $3]);
      }), o('Reference', function() {
        return $1;
      }), o('Literal', function() {
        return $1;
      }), o('Math', function() {
        return $1;
      }), o('Boolean', function() {
        return $1;
      }), o('Path', function() {
        return $1;
      })
    ]
  };

  tokens = [];

  for (name in bnf) {
    if (!__hasProp.call(bnf, name)) continue;
    alternatives = bnf[name];
    bnf[name] = (function() {
      var _i, _j, _len, _len1, _ref1, _results;
      _results = [];
      for (_i = 0, _len = alternatives.length; _i < _len; _i++) {
        alt = alternatives[_i];
        _ref1 = alt[0].split(' ');
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          token = _ref1[_j];
          if (!bnf[token]) {
            tokens.push(token);
          }
        }
        if (name === 'Root') {
          alt[1] = "" + alt[1];
        }
        _results.push(alt);
      }
      return _results;
    })();
  }

  grammar.tokens = tokens.join(' ');

  root.parser = parser = new Parser(grammar);

  parser.yy.escapeString = function(s) {
    return s.replace(/\\\n/, '').replace(/\\([^xubfnvrt0\\])/g, '$1');
  };

  parser.yy.Expression = Expression;

  parser.yy.Empty = {
    operator: {
      name: 'empty'
    }
  };

}).call(this);
