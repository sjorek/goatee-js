/* // Goatee Expression Parser */
var global = (function(){return this;})();
var Expression = require('./Expression').Expression;
var yy = require('./Scope').Scope
/* parser generated by jison 0.4.6 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"EOF":4,"Statements":5,";":6,"Parameters":7,"Expression":8,",":9,"Key":10,"Primitive":11,"Identifier":12,"KeyValue":13,":":14,"KeyValues":15,"Object":16,"{":17,"}":18,"Elements":19,"Array":20,"[":21,"]":22,"Assign":23,"=":24,"-=":25,"+=":26,"*=":27,"/=":28,"<<=":29,">>=":30,">>>=":31,"&=":32,"^=":33,"|=":34,"%=":35,"Statement":36,"Conditional":37,"Assignment":38,"EmptyStatement":39,"Block":40,"IF":41,"(":42,")":43,"ELSE":44,"NUMBER":45,"-":46,"NULL":47,"TRUE":48,"FALSE":49,"STRING":50,"Math":51,"*":52,"/":53,"%":54,"+":55,"Boolean":56,"!":57,"<=":58,">=":59,"<":60,">":61,"===":62,"!==":63,"==":64,"!=":65,"&&":66,"||":67,"Literal":68,"REFERENCE":69,"Scope":70,"CONTEXT":71,"Reference":72,"Group":73,"Path":74,".":75,"?":76,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",6:";",9:",",14:":",17:"{",18:"}",21:"[",22:"]",24:"=",25:"-=",26:"+=",27:"*=",28:"/=",29:"<<=",30:">>=",31:">>>=",32:"&=",33:"^=",34:"|=",35:"%=",41:"IF",42:"(",43:")",44:"ELSE",45:"NUMBER",46:"-",47:"NULL",48:"TRUE",49:"FALSE",50:"STRING",52:"*",53:"/",54:"%",55:"+",57:"!",58:"<=",59:">=",60:"<",61:">",62:"===",63:"!==",64:"==",65:"!=",66:"&&",67:"||",69:"REFERENCE",71:"CONTEXT",75:".",76:"?"},
productions_: [0,[3,1],[3,2],[3,3],[7,0],[7,1],[7,3],[10,1],[10,1],[13,3],[15,0],[15,1],[15,3],[16,3],[19,0],[19,1],[19,3],[20,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[5,1],[5,3],[36,1],[36,1],[36,1],[36,1],[39,1],[40,2],[40,3],[37,7],[37,7],[37,5],[38,3],[11,1],[11,2],[11,1],[11,1],[11,1],[11,1],[51,3],[51,3],[51,3],[51,3],[51,3],[56,2],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[68,1],[68,1],[68,1],[12,1],[70,1],[72,1],[72,2],[72,1],[73,3],[74,3],[8,5],[8,4],[8,4],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return new yy.Expression('primitive', [null]);
break;
case 2:return (function () {
          if ($$[$0-1] === yy.Empty) {
            return new yy.Expression('primitive', [null]);
          } else {
            return $$[$0-1];
          }
        }());
break;
case 3:return (function () {
          if ($$[$0-2] === yy.Empty) {
            return new yy.Expression('primitive', [null]);
          } else {
            return $$[$0-2];
          }
        }());
break;
case 4:this.$ = [];
break;
case 5:this.$ = [$$[$0]];
break;
case 6:this.$ = $$[$0-2].concat($$[$0]);
break;
case 7:this.$ = $$[$0];
break;
case 8:this.$ = $$[$0];
break;
case 9:this.$ = [$$[$0-2], $$[$0]];
break;
case 10:this.$ = [];
break;
case 11:this.$ = $$[$0];
break;
case 12:this.$ = $$[$0-2].concat($$[$0]);
break;
case 13:this.$ = new yy.Expression('object', $$[$0-1]);
break;
case 14:this.$ = [];
break;
case 15:this.$ = [$$[$0]];
break;
case 16:this.$ = $$[$0-2].concat($$[$0]);
break;
case 17:this.$ = new yy.Expression('array', $$[$0-1]);
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = $$[$0];
break;
case 20:this.$ = $$[$0];
break;
case 21:this.$ = $$[$0];
break;
case 22:this.$ = $$[$0];
break;
case 23:this.$ = $$[$0];
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = $$[$0];
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = $$[$0];
break;
case 29:this.$ = $$[$0];
break;
case 30:this.$ = $$[$0];
break;
case 31:this.$ = (function () {
          if ($$[$0-2] === yy.Empty) {
            if ($$[$0] === yy.Empty) {
              return yy.Empty;
            } else {
              return new yy.Expression('block', [$$[$0]]);
            }
          } else if ($$[$0-2].operator.name === 'block') {
            if ($$[$0] !== yy.Empty) {
              $$[$0-2].parameters.push($$[$0]);
            }
            return $$[$0-2];
          } else if ($$[$0] === yy.Empty) {
            return new yy.Expression('block', [$$[$0-2]]);
          } else {
            return new yy.Expression('block', [$$[$0-2], $$[$0]]);
          }
        }());
break;
case 32:this.$ = yy.Empty;
break;
case 33:this.$ = $$[$0];
break;
case 34:this.$ = $$[$0];
break;
case 35:this.$ = $$[$0];
break;
case 36:this.$ = yy.Empty;
break;
case 37:this.$ = new yy.Expression('primitive', [null]);
break;
case 38:this.$ = (function () {
          if ($$[$0-1] === yy.Empty) {
            return new yy.Expression('primitive', [null]);
          } else {
            return $$[$0-1];
          }
        }());
break;
case 39:this.$ = new yy.Expression('if', [$$[$0-4], $$[$0-2], $$[$0]]);
break;
case 40:this.$ = new yy.Expression('if', [$$[$0-4], $$[$0-2], $$[$0]]);
break;
case 41:this.$ = new yy.Expression('if', [$$[$0-2], $$[$0]]);
break;
case 42:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 43:this.$ = Number($$[$0]);
break;
case 44:this.$ = -Number($$[$0]);
break;
case 45:this.$ = null;
break;
case 46:this.$ = true;
break;
case 47:this.$ = false;
break;
case 48:this.$ = yy.escapeString($$[$0]);
break;
case 49:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 50:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 51:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 52:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 53:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 54:this.$ = new yy.Expression('!', [$$[$0]]);
break;
case 55:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 56:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 57:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 58:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 59:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 60:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 61:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 62:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 63:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 64:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 65:this.$ = $$[$0];
break;
case 66:this.$ = $$[$0];
break;
case 67:this.$ = new yy.Expression('primitive', [$$[$0]]);
break;
case 68:this.$ = $$[$0];
break;
case 69:this.$ = new yy.Expression('context', $$[$0]);
break;
case 70:this.$ = new yy.Expression('reference', [$$[$0]]);
break;
case 71:this.$ = new yy.Expression('.', [$$[$0-1], $$[$0]]);
break;
case 72:this.$ = $$[$0];
break;
case 73:this.$ = $$[$0-1];
break;
case 74:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], new yy.Expression('reference', [$$[$0]])]);
break;
case 75:this.$ = new yy.Expression('?:', [$$[$0-4], $$[$0-2], $$[$0]]);
break;
case 76:this.$ = new yy.Expression('()', [$$[$0-3]].concat($$[$0-1]));
break;
case 77:this.$ = new yy.Expression('[]', [$$[$0-3], $$[$0-1]]);
break;
case 78:this.$ = $$[$0];
break;
case 79:this.$ = $$[$0];
break;
case 80:this.$ = $$[$0];
break;
case 81:this.$ = $$[$0];
break;
case 82:this.$ = $$[$0];
break;
case 83:this.$ = $$[$0];
break;
}
},
table: [{3:1,4:[1,2],5:3,6:[1,5],8:6,11:20,12:16,16:18,17:[1,25],20:19,21:[1,26],36:4,37:7,38:8,41:[1,15],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{1:[3]},{1:[2,1]},{4:[1,33],6:[1,34]},{4:[2,30],6:[2,30],18:[2,30]},{4:[2,32],6:[2,32],18:[2,32]},{4:[2,33],6:[2,33],18:[2,33],21:[1,37],42:[1,36],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{4:[2,34],6:[2,34],18:[2,34]},{4:[2,35],6:[2,35],18:[2,35]},{4:[2,78],6:[2,78],9:[2,78],14:[2,78],18:[2,78],21:[2,78],22:[2,78],42:[2,78],43:[2,78],46:[2,78],52:[2,78],53:[2,78],54:[2,78],55:[2,78],58:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[2,78],65:[2,78],66:[2,78],67:[2,78],75:[2,78],76:[2,78]},{4:[2,79],6:[2,79],9:[2,79],14:[2,79],18:[2,79],21:[2,79],22:[2,79],42:[2,79],43:[2,79],46:[2,79],52:[2,79],53:[2,79],54:[2,79],55:[2,79],58:[2,79],59:[2,79],60:[2,79],61:[2,79],62:[2,79],63:[2,79],64:[2,79],65:[2,79],66:[2,79],67:[2,79],75:[2,79],76:[2,79]},{4:[2,80],6:[2,80],9:[2,80],14:[2,80],18:[2,80],21:[2,80],22:[2,80],42:[2,80],43:[2,80],46:[2,80],52:[2,80],53:[2,80],54:[2,80],55:[2,80],58:[2,80],59:[2,80],60:[2,80],61:[2,80],62:[2,80],63:[2,80],64:[2,80],65:[2,80],66:[2,80],67:[2,80],75:[2,80],76:[2,80]},{4:[2,81],6:[2,81],9:[2,81],14:[2,81],18:[2,81],21:[2,81],22:[2,81],42:[2,81],43:[2,81],46:[2,81],52:[2,81],53:[2,81],54:[2,81],55:[2,81],58:[2,81],59:[2,81],60:[2,81],61:[2,81],62:[2,81],63:[2,81],64:[2,81],65:[2,81],66:[2,81],67:[2,81],75:[2,81],76:[2,81]},{4:[2,82],6:[2,82],9:[2,82],14:[2,82],18:[2,82],21:[2,82],22:[2,82],42:[2,82],43:[2,82],46:[2,82],52:[2,82],53:[2,82],54:[2,82],55:[2,82],58:[2,82],59:[2,82],60:[2,82],61:[2,82],62:[2,82],63:[2,82],64:[2,82],65:[2,82],66:[2,82],67:[2,82],75:[2,82],76:[2,82]},{4:[2,83],6:[2,83],9:[2,83],14:[2,83],18:[2,83],21:[2,83],22:[2,83],42:[2,83],43:[2,83],46:[2,83],52:[2,83],53:[2,83],54:[2,83],55:[2,83],58:[2,83],59:[2,83],60:[2,83],61:[2,83],62:[2,83],63:[2,83],64:[2,83],65:[2,83],66:[2,83],67:[2,83],75:[2,83],76:[2,83]},{42:[1,54]},{4:[2,70],6:[2,70],18:[2,70],21:[2,70],23:55,24:[1,56],25:[1,57],26:[1,58],27:[1,59],28:[1,60],29:[1,61],30:[1,62],31:[1,63],32:[1,64],33:[1,65],34:[1,66],35:[1,67],42:[2,70],46:[2,70],52:[2,70],53:[2,70],54:[2,70],55:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],65:[2,70],66:[2,70],67:[2,70],75:[2,70],76:[2,70]},{4:[2,72],6:[2,72],9:[2,72],12:68,14:[2,72],18:[2,72],21:[2,72],22:[2,72],42:[2,72],43:[2,72],46:[2,72],52:[2,72],53:[2,72],54:[2,72],55:[2,72],58:[2,72],59:[2,72],60:[2,72],61:[2,72],62:[2,72],63:[2,72],64:[2,72],65:[2,72],66:[2,72],67:[2,72],69:[1,23],75:[2,72],76:[2,72]},{4:[2,65],6:[2,65],9:[2,65],14:[2,65],18:[2,65],21:[2,65],22:[2,65],42:[2,65],43:[2,65],46:[2,65],52:[2,65],53:[2,65],54:[2,65],55:[2,65],58:[2,65],59:[2,65],60:[2,65],61:[2,65],62:[2,65],63:[2,65],64:[2,65],65:[2,65],66:[2,65],67:[2,65],75:[2,65],76:[2,65]},{4:[2,66],6:[2,66],9:[2,66],14:[2,66],18:[2,66],21:[2,66],22:[2,66],42:[2,66],43:[2,66],46:[2,66],52:[2,66],53:[2,66],54:[2,66],55:[2,66],58:[2,66],59:[2,66],60:[2,66],61:[2,66],62:[2,66],63:[2,66],64:[2,66],65:[2,66],66:[2,66],67:[2,66],75:[2,66],76:[2,66]},{4:[2,67],6:[2,67],9:[2,67],14:[2,67],18:[2,67],21:[2,67],22:[2,67],42:[2,67],43:[2,67],46:[2,67],52:[2,67],53:[2,67],54:[2,67],55:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67],62:[2,67],63:[2,67],64:[2,67],65:[2,67],66:[2,67],67:[2,67],75:[2,67],76:[2,67]},{8:69,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:71,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{4:[2,68],6:[2,68],9:[2,68],14:[2,68],18:[2,68],21:[2,68],22:[2,68],24:[2,68],25:[2,68],26:[2,68],27:[2,68],28:[2,68],29:[2,68],30:[2,68],31:[2,68],32:[2,68],33:[2,68],34:[2,68],35:[2,68],42:[2,68],43:[2,68],46:[2,68],52:[2,68],53:[2,68],54:[2,68],55:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],63:[2,68],64:[2,68],65:[2,68],66:[2,68],67:[2,68],75:[2,68],76:[2,68]},{4:[2,69],6:[2,69],9:[2,69],14:[2,69],18:[2,69],21:[2,69],22:[2,69],42:[2,69],43:[2,69],46:[2,69],52:[2,69],53:[2,69],54:[2,69],55:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69],64:[2,69],65:[2,69],66:[2,69],67:[2,69],69:[2,69],75:[2,69],76:[2,69]},{9:[2,10],10:74,11:75,12:76,13:73,15:72,18:[2,10],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],69:[1,23]},{8:78,9:[2,14],11:20,12:70,16:18,17:[1,25],19:77,20:19,21:[1,26],22:[2,14],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{4:[2,43],6:[2,43],9:[2,43],14:[2,43],18:[2,43],21:[2,43],22:[2,43],42:[2,43],43:[2,43],46:[2,43],52:[2,43],53:[2,43],54:[2,43],55:[2,43],58:[2,43],59:[2,43],60:[2,43],61:[2,43],62:[2,43],63:[2,43],64:[2,43],65:[2,43],66:[2,43],67:[2,43],75:[2,43],76:[2,43]},{45:[1,79]},{4:[2,45],6:[2,45],9:[2,45],14:[2,45],18:[2,45],21:[2,45],22:[2,45],42:[2,45],43:[2,45],46:[2,45],52:[2,45],53:[2,45],54:[2,45],55:[2,45],58:[2,45],59:[2,45],60:[2,45],61:[2,45],62:[2,45],63:[2,45],64:[2,45],65:[2,45],66:[2,45],67:[2,45],75:[2,45],76:[2,45]},{4:[2,46],6:[2,46],9:[2,46],14:[2,46],18:[2,46],21:[2,46],22:[2,46],42:[2,46],43:[2,46],46:[2,46],52:[2,46],53:[2,46],54:[2,46],55:[2,46],58:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[2,46],65:[2,46],66:[2,46],67:[2,46],75:[2,46],76:[2,46]},{4:[2,47],6:[2,47],9:[2,47],14:[2,47],18:[2,47],21:[2,47],22:[2,47],42:[2,47],43:[2,47],46:[2,47],52:[2,47],53:[2,47],54:[2,47],55:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47],75:[2,47],76:[2,47]},{4:[2,48],6:[2,48],9:[2,48],14:[2,48],18:[2,48],21:[2,48],22:[2,48],42:[2,48],43:[2,48],46:[2,48],52:[2,48],53:[2,48],54:[2,48],55:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48],75:[2,48],76:[2,48]},{1:[2,2]},{4:[1,80],6:[1,5],8:6,11:20,12:16,16:18,17:[1,25],20:19,21:[1,26],36:81,37:7,38:8,41:[1,15],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:82,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{7:83,8:84,9:[2,4],11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],43:[2,4],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:85,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:86,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:87,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:88,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:89,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:90,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:91,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:92,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:93,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:94,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:95,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:96,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:97,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:98,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:99,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:100,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{12:101,69:[1,23]},{8:102,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:103,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{17:[2,18],21:[2,18],42:[2,18],45:[2,18],46:[2,18],47:[2,18],48:[2,18],49:[2,18],50:[2,18],57:[2,18],69:[2,18],71:[2,18]},{17:[2,19],21:[2,19],42:[2,19],45:[2,19],46:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],57:[2,19],69:[2,19],71:[2,19]},{17:[2,20],21:[2,20],42:[2,20],45:[2,20],46:[2,20],47:[2,20],48:[2,20],49:[2,20],50:[2,20],57:[2,20],69:[2,20],71:[2,20]},{17:[2,21],21:[2,21],42:[2,21],45:[2,21],46:[2,21],47:[2,21],48:[2,21],49:[2,21],50:[2,21],57:[2,21],69:[2,21],71:[2,21]},{17:[2,22],21:[2,22],42:[2,22],45:[2,22],46:[2,22],47:[2,22],48:[2,22],49:[2,22],50:[2,22],57:[2,22],69:[2,22],71:[2,22]},{17:[2,23],21:[2,23],42:[2,23],45:[2,23],46:[2,23],47:[2,23],48:[2,23],49:[2,23],50:[2,23],57:[2,23],69:[2,23],71:[2,23]},{17:[2,24],21:[2,24],42:[2,24],45:[2,24],46:[2,24],47:[2,24],48:[2,24],49:[2,24],50:[2,24],57:[2,24],69:[2,24],71:[2,24]},{17:[2,25],21:[2,25],42:[2,25],45:[2,25],46:[2,25],47:[2,25],48:[2,25],49:[2,25],50:[2,25],57:[2,25],69:[2,25],71:[2,25]},{17:[2,26],21:[2,26],42:[2,26],45:[2,26],46:[2,26],47:[2,26],48:[2,26],49:[2,26],50:[2,26],57:[2,26],69:[2,26],71:[2,26]},{17:[2,27],21:[2,27],42:[2,27],45:[2,27],46:[2,27],47:[2,27],48:[2,27],49:[2,27],50:[2,27],57:[2,27],69:[2,27],71:[2,27]},{17:[2,28],21:[2,28],42:[2,28],45:[2,28],46:[2,28],47:[2,28],48:[2,28],49:[2,28],50:[2,28],57:[2,28],69:[2,28],71:[2,28]},{17:[2,29],21:[2,29],42:[2,29],45:[2,29],46:[2,29],47:[2,29],48:[2,29],49:[2,29],50:[2,29],57:[2,29],69:[2,29],71:[2,29]},{4:[2,71],6:[2,71],9:[2,71],14:[2,71],18:[2,71],21:[2,71],22:[2,71],42:[2,71],43:[2,71],46:[2,71],52:[2,71],53:[2,71],54:[2,71],55:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],64:[2,71],65:[2,71],66:[2,71],67:[2,71],75:[2,71],76:[2,71]},{4:[2,54],6:[2,54],9:[2,54],14:[2,54],18:[2,54],21:[1,37],22:[2,54],42:[1,36],43:[2,54],46:[2,54],52:[2,54],53:[2,54],54:[2,54],55:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],65:[2,54],66:[2,54],67:[2,54],75:[1,53],76:[2,54]},{4:[2,70],6:[2,70],9:[2,70],14:[2,70],18:[2,70],21:[2,70],22:[2,70],42:[2,70],43:[2,70],46:[2,70],52:[2,70],53:[2,70],54:[2,70],55:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],65:[2,70],66:[2,70],67:[2,70],75:[2,70],76:[2,70]},{21:[1,37],42:[1,36],43:[1,104],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{9:[1,106],18:[1,105]},{9:[2,11],18:[2,11]},{14:[1,107]},{14:[2,7]},{14:[2,8]},{9:[1,109],22:[1,108]},{9:[2,15],21:[1,37],22:[2,15],42:[1,36],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{4:[2,44],6:[2,44],9:[2,44],14:[2,44],18:[2,44],21:[2,44],22:[2,44],42:[2,44],43:[2,44],46:[2,44],52:[2,44],53:[2,44],54:[2,44],55:[2,44],58:[2,44],59:[2,44],60:[2,44],61:[2,44],62:[2,44],63:[2,44],64:[2,44],65:[2,44],66:[2,44],67:[2,44],75:[2,44],76:[2,44]},{1:[2,3]},{4:[2,31],6:[2,31],18:[2,31]},{14:[1,110],21:[1,37],42:[1,36],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{9:[1,112],43:[1,111]},{9:[2,5],21:[1,37],42:[1,36],43:[2,5],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{21:[1,37],22:[1,113],42:[1,36],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{4:[2,49],6:[2,49],9:[2,49],14:[2,49],18:[2,49],21:[1,37],22:[2,49],42:[1,36],43:[2,49],46:[2,49],52:[2,49],53:[2,49],54:[2,49],55:[2,49],58:[2,49],59:[2,49],60:[2,49],61:[2,49],62:[2,49],63:[2,49],64:[2,49],65:[2,49],66:[2,49],67:[2,49],75:[1,53],76:[2,49]},{4:[2,50],6:[2,50],9:[2,50],14:[2,50],18:[2,50],21:[1,37],22:[2,50],42:[1,36],43:[2,50],46:[2,50],52:[2,50],53:[2,50],54:[2,50],55:[2,50],58:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],64:[2,50],65:[2,50],66:[2,50],67:[2,50],75:[1,53],76:[2,50]},{4:[2,51],6:[2,51],9:[2,51],14:[2,51],18:[2,51],21:[1,37],22:[2,51],42:[1,36],43:[2,51],46:[2,51],52:[2,51],53:[2,51],54:[2,51],55:[2,51],58:[2,51],59:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51],65:[2,51],66:[2,51],67:[2,51],75:[1,53],76:[2,51]},{4:[2,52],6:[2,52],9:[2,52],14:[2,52],18:[2,52],21:[1,37],22:[2,52],42:[1,36],43:[2,52],46:[2,52],52:[1,38],53:[1,39],54:[1,40],55:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[2,52],62:[2,52],63:[2,52],64:[2,52],65:[2,52],66:[2,52],67:[2,52],75:[1,53],76:[2,52]},{4:[2,53],6:[2,53],9:[2,53],14:[2,53],18:[2,53],21:[1,37],22:[2,53],42:[1,36],43:[2,53],46:[2,53],52:[1,38],53:[1,39],54:[1,40],55:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],65:[2,53],66:[2,53],67:[2,53],75:[1,53],76:[2,53]},{4:[2,55],6:[2,55],9:[2,55],14:[2,55],18:[2,55],21:[1,37],22:[2,55],42:[1,36],43:[2,55],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55],65:[2,55],66:[2,55],67:[2,55],75:[1,53],76:[2,55]},{4:[2,56],6:[2,56],9:[2,56],14:[2,56],18:[2,56],21:[1,37],22:[2,56],42:[1,36],43:[2,56],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56],67:[2,56],75:[1,53],76:[2,56]},{4:[2,57],6:[2,57],9:[2,57],14:[2,57],18:[2,57],21:[1,37],22:[2,57],42:[1,36],43:[2,57],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],65:[2,57],66:[2,57],67:[2,57],75:[1,53],76:[2,57]},{4:[2,58],6:[2,58],9:[2,58],14:[2,58],18:[2,58],21:[1,37],22:[2,58],42:[1,36],43:[2,58],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[2,58],59:[2,58],60:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],65:[2,58],66:[2,58],67:[2,58],75:[1,53],76:[2,58]},{4:[2,59],6:[2,59],9:[2,59],14:[2,59],18:[2,59],21:[1,37],22:[2,59],42:[1,36],43:[2,59],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[2,59],63:[2,59],64:[2,59],65:[2,59],66:[2,59],67:[2,59],75:[1,53],76:[2,59]},{4:[2,60],6:[2,60],9:[2,60],14:[2,60],18:[2,60],21:[1,37],22:[2,60],42:[1,36],43:[2,60],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[2,60],63:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60],75:[1,53],76:[2,60]},{4:[2,61],6:[2,61],9:[2,61],14:[2,61],18:[2,61],21:[1,37],22:[2,61],42:[1,36],43:[2,61],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[2,61],63:[2,61],64:[2,61],65:[2,61],66:[2,61],67:[2,61],75:[1,53],76:[2,61]},{4:[2,62],6:[2,62],9:[2,62],14:[2,62],18:[2,62],21:[1,37],22:[2,62],42:[1,36],43:[2,62],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[2,62],63:[2,62],64:[2,62],65:[2,62],66:[2,62],67:[2,62],75:[1,53],76:[2,62]},{4:[2,63],6:[2,63],9:[2,63],14:[2,63],18:[2,63],21:[1,37],22:[2,63],42:[1,36],43:[2,63],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[2,63],67:[2,63],75:[1,53],76:[2,63]},{4:[2,64],6:[2,64],9:[2,64],14:[2,64],18:[2,64],21:[1,37],22:[2,64],42:[1,36],43:[2,64],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[2,64],75:[1,53],76:[2,64]},{4:[2,74],6:[2,74],9:[2,74],14:[2,74],18:[2,74],21:[2,74],22:[2,74],42:[2,74],43:[2,74],46:[2,74],52:[2,74],53:[2,74],54:[2,74],55:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],65:[2,74],66:[2,74],67:[2,74],75:[2,74],76:[2,74]},{21:[1,37],42:[1,36],43:[1,114],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{4:[2,42],6:[2,42],18:[2,42],21:[1,37],42:[1,36],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{4:[2,73],6:[2,73],9:[2,73],14:[2,73],18:[2,73],21:[2,73],22:[2,73],42:[2,73],43:[2,73],46:[2,73],52:[2,73],53:[2,73],54:[2,73],55:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[2,73],65:[2,73],66:[2,73],67:[2,73],75:[2,73],76:[2,73]},{4:[2,13],6:[2,13],9:[2,13],14:[2,13],18:[2,13],21:[2,13],22:[2,13],42:[2,13],43:[2,13],46:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],65:[2,13],66:[2,13],67:[2,13],75:[2,13],76:[2,13]},{10:74,11:75,12:76,13:115,45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],69:[1,23]},{8:116,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{4:[2,17],6:[2,17],9:[2,17],14:[2,17],18:[2,17],21:[2,17],22:[2,17],42:[2,17],43:[2,17],46:[2,17],52:[2,17],53:[2,17],54:[2,17],55:[2,17],58:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17],63:[2,17],64:[2,17],65:[2,17],66:[2,17],67:[2,17],75:[2,17],76:[2,17]},{8:117,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{8:118,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{4:[2,76],6:[2,76],9:[2,76],14:[2,76],18:[2,76],21:[2,76],22:[2,76],42:[2,76],43:[2,76],46:[2,76],52:[2,76],53:[2,76],54:[2,76],55:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76],65:[2,76],66:[2,76],67:[2,76],75:[2,76],76:[2,76]},{8:119,11:20,12:70,16:18,17:[1,25],20:19,21:[1,26],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{4:[2,77],6:[2,77],9:[2,77],14:[2,77],18:[2,77],21:[2,77],22:[2,77],42:[2,77],43:[2,77],46:[2,77],52:[2,77],53:[2,77],54:[2,77],55:[2,77],58:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[2,77],66:[2,77],67:[2,77],75:[2,77],76:[2,77]},{17:[1,121],40:120},{9:[2,12],18:[2,12]},{9:[2,9],18:[2,9],21:[1,37],42:[1,36],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{9:[2,16],21:[1,37],22:[2,16],42:[1,36],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{4:[2,75],6:[2,75],9:[2,75],14:[2,75],18:[2,75],21:[1,37],22:[2,75],42:[1,36],43:[2,75],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{9:[2,6],21:[1,37],42:[1,36],43:[2,6],46:[1,42],52:[1,38],53:[1,39],54:[1,40],55:[1,41],58:[1,43],59:[1,44],60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50],66:[1,51],67:[1,52],75:[1,53],76:[1,35]},{4:[2,41],6:[2,41],18:[2,41],44:[1,122]},{5:124,6:[1,5],8:6,11:20,12:16,16:18,17:[1,25],18:[1,123],20:19,21:[1,26],36:4,37:7,38:8,41:[1,15],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13},{17:[1,121],37:125,40:126,41:[1,15]},{4:[2,37],6:[2,37],18:[2,37],44:[2,37]},{6:[1,128],18:[1,127]},{4:[2,39],6:[2,39],18:[2,39]},{4:[2,40],6:[2,40],18:[2,40]},{4:[2,38],6:[2,38],18:[2,38],44:[2,38]},{6:[1,5],8:6,11:20,12:16,16:18,17:[1,25],20:19,21:[1,26],36:81,37:7,38:8,41:[1,15],42:[1,22],45:[1,27],46:[1,28],47:[1,29],48:[1,30],49:[1,31],50:[1,32],51:11,56:12,57:[1,21],68:10,69:[1,23],70:17,71:[1,24],72:9,73:14,74:13}],
defaultActions: {2:[2,1],33:[2,2],75:[2,7],76:[2,8],80:[2,3]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
undefined/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return (function () {}());
break;
case 1:return 45;
break;
case 2:return 45;
break;
case 3:return 'RETURN';
break;
case 4:return 41;
break;
case 5:return 'THEN';
break;
case 6:return 44;
break;
case 7:return 47;
break;
case 8:return 48;
break;
case 9:return 49;
break;
case 10:return 'NEW';
break;
case 11:return 71;
break;
case 12:return 69;
break;
case 13:return 50;
break;
case 14:return 50;
break;
case 15:return (function () {}());
break;
case 16:return 75;
break;
case 17:return 21;
break;
case 18:return 22;
break;
case 19:return 42;
break;
case 20:return 43;
break;
case 21:return 62;
break;
case 22:return 63;
break;
case 23:return 64;
break;
case 24:return 65;
break;
case 25:return 58;
break;
case 26:return 59;
break;
case 27:return 60;
break;
case 28:return 61;
break;
case 29:return 66;
break;
case 30:return 67;
break;
case 31:return 76;
break;
case 32:return 14;
break;
case 33:return 6;
break;
case 34:return 9;
break;
case 35:return 17;
break;
case 36:return 18;
break;
case 37:return 57;
break;
case 38:return 25;
break;
case 39:return 26;
break;
case 40:return 27;
break;
case 41:return 28;
break;
case 42:return 31;
break;
case 43:return 30;
break;
case 44:return 29;
break;
case 45:return 32;
break;
case 46:return 33;
break;
case 47:return 34;
break;
case 48:return 35;
break;
case 49:return 24;
break;
case 50:return 46;
break;
case 51:return 55;
break;
case 52:return 52;
break;
case 53:return 53;
break;
case 54:return '>>>';
break;
case 55:return '>>';
break;
case 56:return '<<';
break;
case 57:return '&';
break;
case 58:return '^';
break;
case 59:return '|';
break;
case 60:return 54;
break;
case 61:return 4;
break;
}
},
rules: [/^(?:\s+)/,/^(?:0[xX][a-fA-F0-9]+\b)/,/^(?:([1-9][0-9]+|[0-9])(\.[0-9]+)?([eE][-+]?[0-9]+)?\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:new\b)/,/^(?:[@$])/,/^(?:[a-zA-Z_$]\w*)/,/^(?:"(\\x[a-fA-F0-9]{2}|\\u[a-fA-F0-9]{4}|\\[^xu]|[^\\"])*")/,/^(?:'(\\[\/'\\bfnrt]|\\u[a-fA-F0-9]{4}|[^\\'])*')/,/^(?:\/\*(?:.|[\r\n])*?\*\/)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:===)/,/^(?:!==)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\&\&)/,/^(?:\|\|)/,/^(?:\?)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:{)/,/^(?:})/,/^(?:!)/,/^(?:-=)/,/^(?:\+=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:>>>=)/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:%=)/,/^(?:=)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:>>>)/,/^(?:>>)/,/^(?:<<)/,/^(?:\&)/,/^(?:\^)/,/^(?:\|)/,/^(?:%)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
parser.yy = yy;

Expression.parse = (function() {
    var cache = {};
    return function(code) {
        if (cache.hasOwnProperty(code)) {
            return cache[code];
        }
        var expression = parser.parse(code);
        return cache[code] = cache['' + expression] = expression;
    };
})();
if (typeof module !== 'undefined')
    module.exports = Expression.parse;