/* // Goatee Expression Parser */
var global = (function(){return this;})();
var Expression = require('./Expression').Expression;
var yy = require('./Scope').Scope
/* parser generated by jison 0.4.6 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"EOF":4,"Statements":5,"Parameters":6,"Expression":7,",":8,"Key":9,"Primitive":10,"Identifier":11,"KeyValue":12,":":13,"KeyValues":14,"Object":15,"{":16,"}":17,"Elements":18,"Array":19,"[":20,"]":21,"Assign":22,"=":23,"-=":24,"+=":25,"*=":26,"/=":27,"<<=":28,">>=":29,">>>=":30,"&=":31,"^=":32,"|=":33,"%=":34,"Statement":35,"EmptyStatement":36,"ExpressionStatement":37,"ConditionalStatement":38,"AssignStatement":39,"Block":40,";":41,"Conditional":42,"IF":43,"(":44,")":45,"ELSE":46,"NUMBER":47,"-":48,"NULL":49,"TRUE":50,"FALSE":51,"STRING":52,"Math":53,"*":54,"/":55,"%":56,"+":57,"Boolean":58,"!":59,"<=":60,">=":61,"<":62,">":63,"===":64,"!==":65,"==":66,"!=":67,"&&":68,"||":69,"Literal":70,"REFERENCE":71,"Scope":72,"CONTEXT":73,"Reference":74,"Group":75,"Path":76,".":77,"?":78,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",8:",",13:":",16:"{",17:"}",20:"[",21:"]",23:"=",24:"-=",25:"+=",26:"*=",27:"/=",28:"<<=",29:">>=",30:">>>=",31:"&=",32:"^=",33:"|=",34:"%=",41:";",43:"IF",44:"(",45:")",46:"ELSE",47:"NUMBER",48:"-",49:"NULL",50:"TRUE",51:"FALSE",52:"STRING",54:"*",55:"/",56:"%",57:"+",59:"!",60:"<=",61:">=",62:"<",63:">",64:"===",65:"!==",66:"==",67:"!=",68:"&&",69:"||",71:"REFERENCE",73:"CONTEXT",77:".",78:"?"},
productions_: [0,[3,1],[3,2],[3,1],[6,0],[6,1],[6,3],[9,1],[9,1],[12,3],[14,0],[14,1],[14,3],[15,3],[18,0],[18,1],[18,3],[19,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[5,1],[5,2],[35,1],[35,1],[35,1],[35,1],[40,3],[36,1],[37,2],[37,2],[38,2],[38,2],[39,3],[42,7],[42,7],[42,5],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[53,3],[53,3],[53,3],[53,3],[53,3],[58,2],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[70,1],[70,1],[70,1],[11,1],[72,1],[74,1],[74,2],[74,1],[75,3],[76,3],[7,5],[7,4],[7,4],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return new yy.Expression('primitive', [null]);
break;
case 2:return (function () {
          if ($$[$0-1] === yy.Empty) {
            return new yy.Expression('primitive', [null]);
          } else {
            return $$[$0-1];
          }
        }());
break;
case 3:return (function () {
          if ($$[$0] === yy.Empty) {
            return new yy.Expression('primitive', [null]);
          } else {
            return $$[$0];
          }
        }());
break;
case 4:this.$ = [];
break;
case 5:this.$ = [$$[$0]];
break;
case 6:this.$ = $$[$0-2].concat($$[$0]);
break;
case 7:this.$ = $$[$0];
break;
case 8:this.$ = $$[$0];
break;
case 9:this.$ = [$$[$0-2], $$[$0]];
break;
case 10:this.$ = [];
break;
case 11:this.$ = $$[$0];
break;
case 12:this.$ = $$[$0-2].concat($$[$0]);
break;
case 13:this.$ = new yy.Expression('object', $$[$0-1]);
break;
case 14:this.$ = [];
break;
case 15:this.$ = [$$[$0]];
break;
case 16:this.$ = $$[$0-2].concat($$[$0]);
break;
case 17:this.$ = new yy.Expression('array', $$[$0-1]);
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = $$[$0];
break;
case 20:this.$ = $$[$0];
break;
case 21:this.$ = $$[$0];
break;
case 22:this.$ = $$[$0];
break;
case 23:this.$ = $$[$0];
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = $$[$0];
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = $$[$0];
break;
case 29:this.$ = $$[$0];
break;
case 30:this.$ = $$[$0];
break;
case 31:this.$ = (function () {
          if ($$[$0-1] === yy.Empty) {
            if ($$[$0] === yy.Empty) {
              return yy.Empty;
            } else {
              return new yy.Expression('block', [$$[$0]]);
            }
          } else if ($$[$0-1].operator.name === 'block') {
            if ($$[$0] !== yy.Empty) {
              $$[$0-1].parameters.push($$[$0]);
            }
            return $$[$0-1];
          } else if ($$[$0] === yy.Empty) {
            return new yy.Expression('block', [$$[$0-1]]);
          } else {
            return new yy.Expression('block', [$$[$0-1], $$[$0]]);
          }
        }());
break;
case 32:this.$ = $$[$0];
break;
case 33:this.$ = $$[$0];
break;
case 34:this.$ = $$[$0];
break;
case 35:this.$ = $$[$0];
break;
case 36:this.$ = (function () {
          if ($$[$0-1] === yy.Empty) {
            return new yy.Expression('primitive', [null]);
          } else {
            return $$[$0-1];
          }
        }());
break;
case 37:this.$ = yy.Empty;
break;
case 38:this.$ = $$[$0-1];
break;
case 39:this.$ = $$[$0-1];
break;
case 40:this.$ = $$[$0-1];
break;
case 41:this.$ = $$[$0-1];
break;
case 42:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 43:this.$ = new yy.Expression('if', [$$[$0-4], $$[$0-2], $$[$0]]);
break;
case 44:this.$ = new yy.Expression('if', [$$[$0-4], $$[$0-2], $$[$0]]);
break;
case 45:this.$ = new yy.Expression('if', [$$[$0-2], $$[$0]]);
break;
case 46:this.$ = Number($$[$0]);
break;
case 47:this.$ = -Number($$[$0]);
break;
case 48:this.$ = null;
break;
case 49:this.$ = true;
break;
case 50:this.$ = false;
break;
case 51:this.$ = yy.escapeString($$[$0]);
break;
case 52:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 53:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 54:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 55:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 56:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 57:this.$ = new yy.Expression('!', [$$[$0]]);
break;
case 58:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 59:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 60:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 61:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 62:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 63:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 64:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 65:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 66:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 67:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 68:this.$ = $$[$0];
break;
case 69:this.$ = $$[$0];
break;
case 70:this.$ = new yy.Expression('primitive', [$$[$0]]);
break;
case 71:this.$ = $$[$0];
break;
case 72:this.$ = new yy.Expression('context', $$[$0]);
break;
case 73:this.$ = new yy.Expression('reference', [$$[$0]]);
break;
case 74:this.$ = new yy.Expression('.', [$$[$0-1], $$[$0]]);
break;
case 75:this.$ = $$[$0];
break;
case 76:this.$ = $$[$0-1];
break;
case 77:this.$ = new yy.Expression($$[$0-1], [$$[$0-2], new yy.Expression('reference', [$$[$0]])]);
break;
case 78:this.$ = new yy.Expression('?:', [$$[$0-4], $$[$0-2], $$[$0]]);
break;
case 79:this.$ = new yy.Expression('()', [$$[$0-3]].concat($$[$0-1]));
break;
case 80:this.$ = new yy.Expression('[]', [$$[$0-3], $$[$0-1]]);
break;
case 81:this.$ = $$[$0];
break;
case 82:this.$ = $$[$0];
break;
case 83:this.$ = $$[$0];
break;
case 84:this.$ = $$[$0];
break;
case 85:this.$ = $$[$0];
break;
case 86:this.$ = $$[$0];
break;
}
},
table: [{3:1,4:[1,2],5:3,7:10,10:24,11:12,15:22,16:[1,28],19:23,20:[1,29],35:4,36:5,37:6,38:7,39:8,41:[1,9],42:11,43:[1,19],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{1:[3]},{1:[2,1]},{1:[2,3],4:[1,36],7:10,10:24,11:12,15:22,16:[1,28],19:23,20:[1,29],35:37,36:5,37:6,38:7,39:8,41:[1,9],42:11,43:[1,19],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{1:[2,30],4:[2,30],16:[2,30],17:[2,30],20:[2,30],41:[2,30],43:[2,30],44:[2,30],47:[2,30],48:[2,30],49:[2,30],50:[2,30],51:[2,30],52:[2,30],59:[2,30],71:[2,30],73:[2,30]},{1:[2,32],4:[2,32],16:[2,32],17:[2,32],20:[2,32],41:[2,32],43:[2,32],44:[2,32],47:[2,32],48:[2,32],49:[2,32],50:[2,32],51:[2,32],52:[2,32],59:[2,32],71:[2,32],73:[2,32]},{1:[2,33],4:[2,33],16:[2,33],17:[2,33],20:[2,33],41:[2,33],43:[2,33],44:[2,33],47:[2,33],48:[2,33],49:[2,33],50:[2,33],51:[2,33],52:[2,33],59:[2,33],71:[2,33],73:[2,33]},{1:[2,34],4:[2,34],16:[2,34],17:[2,34],20:[2,34],41:[2,34],43:[2,34],44:[2,34],47:[2,34],48:[2,34],49:[2,34],50:[2,34],51:[2,34],52:[2,34],59:[2,34],71:[2,34],73:[2,34]},{1:[2,35],4:[2,35],16:[2,35],17:[2,35],20:[2,35],41:[2,35],43:[2,35],44:[2,35],47:[2,35],48:[2,35],49:[2,35],50:[2,35],51:[2,35],52:[2,35],59:[2,35],71:[2,35],73:[2,35]},{1:[2,37],4:[2,37],16:[2,37],17:[2,37],20:[2,37],41:[2,37],43:[2,37],44:[2,37],47:[2,37],48:[2,37],49:[2,37],50:[2,37],51:[2,37],52:[2,37],59:[2,37],71:[2,37],73:[2,37]},{4:[1,39],20:[1,42],41:[1,38],44:[1,41],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{4:[1,60],41:[1,59]},{4:[2,73],20:[2,73],22:61,23:[1,62],24:[1,63],25:[1,64],26:[1,65],27:[1,66],28:[1,67],29:[1,68],30:[1,69],31:[1,70],32:[1,71],33:[1,72],34:[1,73],41:[2,73],44:[2,73],48:[2,73],54:[2,73],55:[2,73],56:[2,73],57:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[2,73],65:[2,73],66:[2,73],67:[2,73],68:[2,73],69:[2,73],77:[2,73],78:[2,73]},{4:[2,81],8:[2,81],13:[2,81],17:[2,81],20:[2,81],21:[2,81],41:[2,81],44:[2,81],45:[2,81],48:[2,81],54:[2,81],55:[2,81],56:[2,81],57:[2,81],60:[2,81],61:[2,81],62:[2,81],63:[2,81],64:[2,81],65:[2,81],66:[2,81],67:[2,81],68:[2,81],69:[2,81],77:[2,81],78:[2,81]},{4:[2,82],8:[2,82],13:[2,82],17:[2,82],20:[2,82],21:[2,82],41:[2,82],44:[2,82],45:[2,82],48:[2,82],54:[2,82],55:[2,82],56:[2,82],57:[2,82],60:[2,82],61:[2,82],62:[2,82],63:[2,82],64:[2,82],65:[2,82],66:[2,82],67:[2,82],68:[2,82],69:[2,82],77:[2,82],78:[2,82]},{4:[2,83],8:[2,83],13:[2,83],17:[2,83],20:[2,83],21:[2,83],41:[2,83],44:[2,83],45:[2,83],48:[2,83],54:[2,83],55:[2,83],56:[2,83],57:[2,83],60:[2,83],61:[2,83],62:[2,83],63:[2,83],64:[2,83],65:[2,83],66:[2,83],67:[2,83],68:[2,83],69:[2,83],77:[2,83],78:[2,83]},{4:[2,84],8:[2,84],13:[2,84],17:[2,84],20:[2,84],21:[2,84],41:[2,84],44:[2,84],45:[2,84],48:[2,84],54:[2,84],55:[2,84],56:[2,84],57:[2,84],60:[2,84],61:[2,84],62:[2,84],63:[2,84],64:[2,84],65:[2,84],66:[2,84],67:[2,84],68:[2,84],69:[2,84],77:[2,84],78:[2,84]},{4:[2,85],8:[2,85],13:[2,85],17:[2,85],20:[2,85],21:[2,85],41:[2,85],44:[2,85],45:[2,85],48:[2,85],54:[2,85],55:[2,85],56:[2,85],57:[2,85],60:[2,85],61:[2,85],62:[2,85],63:[2,85],64:[2,85],65:[2,85],66:[2,85],67:[2,85],68:[2,85],69:[2,85],77:[2,85],78:[2,85]},{4:[2,86],8:[2,86],13:[2,86],17:[2,86],20:[2,86],21:[2,86],41:[2,86],44:[2,86],45:[2,86],48:[2,86],54:[2,86],55:[2,86],56:[2,86],57:[2,86],60:[2,86],61:[2,86],62:[2,86],63:[2,86],64:[2,86],65:[2,86],66:[2,86],67:[2,86],68:[2,86],69:[2,86],77:[2,86],78:[2,86]},{44:[1,74]},{4:[2,71],8:[2,71],13:[2,71],17:[2,71],20:[2,71],21:[2,71],23:[2,71],24:[2,71],25:[2,71],26:[2,71],27:[2,71],28:[2,71],29:[2,71],30:[2,71],31:[2,71],32:[2,71],33:[2,71],34:[2,71],41:[2,71],44:[2,71],45:[2,71],48:[2,71],54:[2,71],55:[2,71],56:[2,71],57:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],64:[2,71],65:[2,71],66:[2,71],67:[2,71],68:[2,71],69:[2,71],77:[2,71],78:[2,71]},{4:[2,75],8:[2,75],11:75,13:[2,75],17:[2,75],20:[2,75],21:[2,75],41:[2,75],44:[2,75],45:[2,75],48:[2,75],54:[2,75],55:[2,75],56:[2,75],57:[2,75],60:[2,75],61:[2,75],62:[2,75],63:[2,75],64:[2,75],65:[2,75],66:[2,75],67:[2,75],68:[2,75],69:[2,75],71:[1,20],77:[2,75],78:[2,75]},{4:[2,68],8:[2,68],13:[2,68],17:[2,68],20:[2,68],21:[2,68],41:[2,68],44:[2,68],45:[2,68],48:[2,68],54:[2,68],55:[2,68],56:[2,68],57:[2,68],60:[2,68],61:[2,68],62:[2,68],63:[2,68],64:[2,68],65:[2,68],66:[2,68],67:[2,68],68:[2,68],69:[2,68],77:[2,68],78:[2,68]},{4:[2,69],8:[2,69],13:[2,69],17:[2,69],20:[2,69],21:[2,69],41:[2,69],44:[2,69],45:[2,69],48:[2,69],54:[2,69],55:[2,69],56:[2,69],57:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69],64:[2,69],65:[2,69],66:[2,69],67:[2,69],68:[2,69],69:[2,69],77:[2,69],78:[2,69]},{4:[2,70],8:[2,70],13:[2,70],17:[2,70],20:[2,70],21:[2,70],41:[2,70],44:[2,70],45:[2,70],48:[2,70],54:[2,70],55:[2,70],56:[2,70],57:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],65:[2,70],66:[2,70],67:[2,70],68:[2,70],69:[2,70],77:[2,70],78:[2,70]},{7:76,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:78,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{4:[2,72],8:[2,72],13:[2,72],17:[2,72],20:[2,72],21:[2,72],41:[2,72],44:[2,72],45:[2,72],48:[2,72],54:[2,72],55:[2,72],56:[2,72],57:[2,72],60:[2,72],61:[2,72],62:[2,72],63:[2,72],64:[2,72],65:[2,72],66:[2,72],67:[2,72],68:[2,72],69:[2,72],71:[2,72],77:[2,72],78:[2,72]},{8:[2,10],9:81,10:82,11:83,12:80,14:79,17:[2,10],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],71:[1,20]},{7:85,8:[2,14],10:24,11:77,15:22,16:[1,28],18:84,19:23,20:[1,29],21:[2,14],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{4:[2,46],8:[2,46],13:[2,46],17:[2,46],20:[2,46],21:[2,46],41:[2,46],44:[2,46],45:[2,46],48:[2,46],54:[2,46],55:[2,46],56:[2,46],57:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[2,46],65:[2,46],66:[2,46],67:[2,46],68:[2,46],69:[2,46],77:[2,46],78:[2,46]},{47:[1,86]},{4:[2,48],8:[2,48],13:[2,48],17:[2,48],20:[2,48],21:[2,48],41:[2,48],44:[2,48],45:[2,48],48:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48],68:[2,48],69:[2,48],77:[2,48],78:[2,48]},{4:[2,49],8:[2,49],13:[2,49],17:[2,49],20:[2,49],21:[2,49],41:[2,49],44:[2,49],45:[2,49],48:[2,49],54:[2,49],55:[2,49],56:[2,49],57:[2,49],60:[2,49],61:[2,49],62:[2,49],63:[2,49],64:[2,49],65:[2,49],66:[2,49],67:[2,49],68:[2,49],69:[2,49],77:[2,49],78:[2,49]},{4:[2,50],8:[2,50],13:[2,50],17:[2,50],20:[2,50],21:[2,50],41:[2,50],44:[2,50],45:[2,50],48:[2,50],54:[2,50],55:[2,50],56:[2,50],57:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],64:[2,50],65:[2,50],66:[2,50],67:[2,50],68:[2,50],69:[2,50],77:[2,50],78:[2,50]},{4:[2,51],8:[2,51],13:[2,51],17:[2,51],20:[2,51],21:[2,51],41:[2,51],44:[2,51],45:[2,51],48:[2,51],54:[2,51],55:[2,51],56:[2,51],57:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51],65:[2,51],66:[2,51],67:[2,51],68:[2,51],69:[2,51],77:[2,51],78:[2,51]},{1:[2,2]},{1:[2,31],4:[2,31],16:[2,31],17:[2,31],20:[2,31],41:[2,31],43:[2,31],44:[2,31],47:[2,31],48:[2,31],49:[2,31],50:[2,31],51:[2,31],52:[2,31],59:[2,31],71:[2,31],73:[2,31]},{1:[2,38],4:[2,38],16:[2,38],17:[2,38],20:[2,38],41:[2,38],43:[2,38],44:[2,38],47:[2,38],48:[2,38],49:[2,38],50:[2,38],51:[2,38],52:[2,38],59:[2,38],71:[2,38],73:[2,38]},{1:[2,39],4:[2,39],16:[2,39],17:[2,39],20:[2,39],41:[2,39],43:[2,39],44:[2,39],47:[2,39],48:[2,39],49:[2,39],50:[2,39],51:[2,39],52:[2,39],59:[2,39],71:[2,39],73:[2,39]},{7:87,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{6:88,7:89,8:[2,4],10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],45:[2,4],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:90,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:91,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:92,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:93,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:94,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:95,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:96,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:97,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:98,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:99,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:100,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:101,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:102,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:103,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:104,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:105,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{11:106,71:[1,20]},{1:[2,40],4:[2,40],16:[2,40],17:[2,40],20:[2,40],41:[2,40],43:[2,40],44:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],51:[2,40],52:[2,40],59:[2,40],71:[2,40],73:[2,40]},{1:[2,41],4:[2,41],16:[2,41],17:[2,41],20:[2,41],41:[2,41],43:[2,41],44:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],51:[2,41],52:[2,41],59:[2,41],71:[2,41],73:[2,41]},{7:10,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],37:107,44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{16:[2,18],20:[2,18],44:[2,18],47:[2,18],48:[2,18],49:[2,18],50:[2,18],51:[2,18],52:[2,18],59:[2,18],71:[2,18],73:[2,18]},{16:[2,19],20:[2,19],44:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],52:[2,19],59:[2,19],71:[2,19],73:[2,19]},{16:[2,20],20:[2,20],44:[2,20],47:[2,20],48:[2,20],49:[2,20],50:[2,20],51:[2,20],52:[2,20],59:[2,20],71:[2,20],73:[2,20]},{16:[2,21],20:[2,21],44:[2,21],47:[2,21],48:[2,21],49:[2,21],50:[2,21],51:[2,21],52:[2,21],59:[2,21],71:[2,21],73:[2,21]},{16:[2,22],20:[2,22],44:[2,22],47:[2,22],48:[2,22],49:[2,22],50:[2,22],51:[2,22],52:[2,22],59:[2,22],71:[2,22],73:[2,22]},{16:[2,23],20:[2,23],44:[2,23],47:[2,23],48:[2,23],49:[2,23],50:[2,23],51:[2,23],52:[2,23],59:[2,23],71:[2,23],73:[2,23]},{16:[2,24],20:[2,24],44:[2,24],47:[2,24],48:[2,24],49:[2,24],50:[2,24],51:[2,24],52:[2,24],59:[2,24],71:[2,24],73:[2,24]},{16:[2,25],20:[2,25],44:[2,25],47:[2,25],48:[2,25],49:[2,25],50:[2,25],51:[2,25],52:[2,25],59:[2,25],71:[2,25],73:[2,25]},{16:[2,26],20:[2,26],44:[2,26],47:[2,26],48:[2,26],49:[2,26],50:[2,26],51:[2,26],52:[2,26],59:[2,26],71:[2,26],73:[2,26]},{16:[2,27],20:[2,27],44:[2,27],47:[2,27],48:[2,27],49:[2,27],50:[2,27],51:[2,27],52:[2,27],59:[2,27],71:[2,27],73:[2,27]},{16:[2,28],20:[2,28],44:[2,28],47:[2,28],48:[2,28],49:[2,28],50:[2,28],51:[2,28],52:[2,28],59:[2,28],71:[2,28],73:[2,28]},{16:[2,29],20:[2,29],44:[2,29],47:[2,29],48:[2,29],49:[2,29],50:[2,29],51:[2,29],52:[2,29],59:[2,29],71:[2,29],73:[2,29]},{7:108,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{4:[2,74],8:[2,74],13:[2,74],17:[2,74],20:[2,74],21:[2,74],41:[2,74],44:[2,74],45:[2,74],48:[2,74],54:[2,74],55:[2,74],56:[2,74],57:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],65:[2,74],66:[2,74],67:[2,74],68:[2,74],69:[2,74],77:[2,74],78:[2,74]},{4:[2,57],8:[2,57],13:[2,57],17:[2,57],20:[1,42],21:[2,57],41:[2,57],44:[1,41],45:[2,57],48:[2,57],54:[2,57],55:[2,57],56:[2,57],57:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],65:[2,57],66:[2,57],67:[2,57],68:[2,57],69:[2,57],77:[1,58],78:[2,57]},{4:[2,73],8:[2,73],13:[2,73],17:[2,73],20:[2,73],21:[2,73],41:[2,73],44:[2,73],45:[2,73],48:[2,73],54:[2,73],55:[2,73],56:[2,73],57:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[2,73],65:[2,73],66:[2,73],67:[2,73],68:[2,73],69:[2,73],77:[2,73],78:[2,73]},{20:[1,42],44:[1,41],45:[1,109],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{8:[1,111],17:[1,110]},{8:[2,11],17:[2,11]},{13:[1,112]},{13:[2,7]},{13:[2,8]},{8:[1,114],21:[1,113]},{8:[2,15],20:[1,42],21:[2,15],44:[1,41],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{4:[2,47],8:[2,47],13:[2,47],17:[2,47],20:[2,47],21:[2,47],41:[2,47],44:[2,47],45:[2,47],48:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47],68:[2,47],69:[2,47],77:[2,47],78:[2,47]},{13:[1,115],20:[1,42],44:[1,41],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{8:[1,117],45:[1,116]},{8:[2,5],20:[1,42],44:[1,41],45:[2,5],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{20:[1,42],21:[1,118],44:[1,41],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{4:[2,52],8:[2,52],13:[2,52],17:[2,52],20:[1,42],21:[2,52],41:[2,52],44:[1,41],45:[2,52],48:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],60:[2,52],61:[2,52],62:[2,52],63:[2,52],64:[2,52],65:[2,52],66:[2,52],67:[2,52],68:[2,52],69:[2,52],77:[1,58],78:[2,52]},{4:[2,53],8:[2,53],13:[2,53],17:[2,53],20:[1,42],21:[2,53],41:[2,53],44:[1,41],45:[2,53],48:[2,53],54:[2,53],55:[2,53],56:[2,53],57:[2,53],60:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],65:[2,53],66:[2,53],67:[2,53],68:[2,53],69:[2,53],77:[1,58],78:[2,53]},{4:[2,54],8:[2,54],13:[2,54],17:[2,54],20:[1,42],21:[2,54],41:[2,54],44:[1,41],45:[2,54],48:[2,54],54:[2,54],55:[2,54],56:[2,54],57:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],65:[2,54],66:[2,54],67:[2,54],68:[2,54],69:[2,54],77:[1,58],78:[2,54]},{4:[2,55],8:[2,55],13:[2,55],17:[2,55],20:[1,42],21:[2,55],41:[2,55],44:[1,41],45:[2,55],48:[2,55],54:[1,43],55:[1,44],56:[1,45],57:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55],65:[2,55],66:[2,55],67:[2,55],68:[2,55],69:[2,55],77:[1,58],78:[2,55]},{4:[2,56],8:[2,56],13:[2,56],17:[2,56],20:[1,42],21:[2,56],41:[2,56],44:[1,41],45:[2,56],48:[2,56],54:[1,43],55:[1,44],56:[1,45],57:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56],67:[2,56],68:[2,56],69:[2,56],77:[1,58],78:[2,56]},{4:[2,58],8:[2,58],13:[2,58],17:[2,58],20:[1,42],21:[2,58],41:[2,58],44:[1,41],45:[2,58],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],65:[2,58],66:[2,58],67:[2,58],68:[2,58],69:[2,58],77:[1,58],78:[2,58]},{4:[2,59],8:[2,59],13:[2,59],17:[2,59],20:[1,42],21:[2,59],41:[2,59],44:[1,41],45:[2,59],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[2,59],61:[2,59],62:[2,59],63:[2,59],64:[2,59],65:[2,59],66:[2,59],67:[2,59],68:[2,59],69:[2,59],77:[1,58],78:[2,59]},{4:[2,60],8:[2,60],13:[2,60],17:[2,60],20:[1,42],21:[2,60],41:[2,60],44:[1,41],45:[2,60],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60],68:[2,60],69:[2,60],77:[1,58],78:[2,60]},{4:[2,61],8:[2,61],13:[2,61],17:[2,61],20:[1,42],21:[2,61],41:[2,61],44:[1,41],45:[2,61],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[2,61],61:[2,61],62:[2,61],63:[2,61],64:[2,61],65:[2,61],66:[2,61],67:[2,61],68:[2,61],69:[2,61],77:[1,58],78:[2,61]},{4:[2,62],8:[2,62],13:[2,62],17:[2,62],20:[1,42],21:[2,62],41:[2,62],44:[1,41],45:[2,62],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[2,62],65:[2,62],66:[2,62],67:[2,62],68:[2,62],69:[2,62],77:[1,58],78:[2,62]},{4:[2,63],8:[2,63],13:[2,63],17:[2,63],20:[1,42],21:[2,63],41:[2,63],44:[1,41],45:[2,63],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[2,63],65:[2,63],66:[2,63],67:[2,63],68:[2,63],69:[2,63],77:[1,58],78:[2,63]},{4:[2,64],8:[2,64],13:[2,64],17:[2,64],20:[1,42],21:[2,64],41:[2,64],44:[1,41],45:[2,64],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[2,64],65:[2,64],66:[2,64],67:[2,64],68:[2,64],69:[2,64],77:[1,58],78:[2,64]},{4:[2,65],8:[2,65],13:[2,65],17:[2,65],20:[1,42],21:[2,65],41:[2,65],44:[1,41],45:[2,65],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[2,65],65:[2,65],66:[2,65],67:[2,65],68:[2,65],69:[2,65],77:[1,58],78:[2,65]},{4:[2,66],8:[2,66],13:[2,66],17:[2,66],20:[1,42],21:[2,66],41:[2,66],44:[1,41],45:[2,66],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[2,66],69:[2,66],77:[1,58],78:[2,66]},{4:[2,67],8:[2,67],13:[2,67],17:[2,67],20:[1,42],21:[2,67],41:[2,67],44:[1,41],45:[2,67],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[2,67],77:[1,58],78:[2,67]},{4:[2,77],8:[2,77],13:[2,77],17:[2,77],20:[2,77],21:[2,77],41:[2,77],44:[2,77],45:[2,77],48:[2,77],54:[2,77],55:[2,77],56:[2,77],57:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[2,77],66:[2,77],67:[2,77],68:[2,77],69:[2,77],77:[2,77],78:[2,77]},{1:[2,42],4:[2,42],16:[2,42],17:[2,42],20:[2,42],41:[2,42],43:[2,42],44:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],51:[2,42],52:[2,42],59:[2,42],71:[2,42],73:[2,42]},{20:[1,42],44:[1,41],45:[1,119],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{4:[2,76],8:[2,76],13:[2,76],17:[2,76],20:[2,76],21:[2,76],41:[2,76],44:[2,76],45:[2,76],48:[2,76],54:[2,76],55:[2,76],56:[2,76],57:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76],65:[2,76],66:[2,76],67:[2,76],68:[2,76],69:[2,76],77:[2,76],78:[2,76]},{4:[2,13],8:[2,13],13:[2,13],17:[2,13],20:[2,13],21:[2,13],41:[2,13],44:[2,13],45:[2,13],48:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],65:[2,13],66:[2,13],67:[2,13],68:[2,13],69:[2,13],77:[2,13],78:[2,13]},{9:81,10:82,11:83,12:120,47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],71:[1,20]},{7:121,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{4:[2,17],8:[2,17],13:[2,17],17:[2,17],20:[2,17],21:[2,17],41:[2,17],44:[2,17],45:[2,17],48:[2,17],54:[2,17],55:[2,17],56:[2,17],57:[2,17],60:[2,17],61:[2,17],62:[2,17],63:[2,17],64:[2,17],65:[2,17],66:[2,17],67:[2,17],68:[2,17],69:[2,17],77:[2,17],78:[2,17]},{7:122,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{7:123,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{4:[2,79],8:[2,79],13:[2,79],17:[2,79],20:[2,79],21:[2,79],41:[2,79],44:[2,79],45:[2,79],48:[2,79],54:[2,79],55:[2,79],56:[2,79],57:[2,79],60:[2,79],61:[2,79],62:[2,79],63:[2,79],64:[2,79],65:[2,79],66:[2,79],67:[2,79],68:[2,79],69:[2,79],77:[2,79],78:[2,79]},{7:124,10:24,11:77,15:22,16:[1,28],19:23,20:[1,29],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{4:[2,80],8:[2,80],13:[2,80],17:[2,80],20:[2,80],21:[2,80],41:[2,80],44:[2,80],45:[2,80],48:[2,80],54:[2,80],55:[2,80],56:[2,80],57:[2,80],60:[2,80],61:[2,80],62:[2,80],63:[2,80],64:[2,80],65:[2,80],66:[2,80],67:[2,80],68:[2,80],69:[2,80],77:[2,80],78:[2,80]},{16:[1,126],40:125},{8:[2,12],17:[2,12]},{8:[2,9],17:[2,9],20:[1,42],44:[1,41],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{8:[2,16],20:[1,42],21:[2,16],44:[1,41],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{4:[2,78],8:[2,78],13:[2,78],17:[2,78],20:[1,42],21:[2,78],41:[2,78],44:[1,41],45:[2,78],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{8:[2,6],20:[1,42],44:[1,41],45:[2,6],48:[1,47],54:[1,43],55:[1,44],56:[1,45],57:[1,46],60:[1,48],61:[1,49],62:[1,50],63:[1,51],64:[1,52],65:[1,53],66:[1,54],67:[1,55],68:[1,56],69:[1,57],77:[1,58],78:[1,40]},{4:[2,45],41:[2,45],46:[1,127]},{5:128,7:10,10:24,11:12,15:22,16:[1,28],19:23,20:[1,29],35:4,36:5,37:6,38:7,39:8,41:[1,9],42:11,43:[1,19],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{16:[1,126],40:130,42:129,43:[1,19]},{7:10,10:24,11:12,15:22,16:[1,28],17:[1,131],19:23,20:[1,29],35:37,36:5,37:6,38:7,39:8,41:[1,9],42:11,43:[1,19],44:[1,26],47:[1,30],48:[1,31],49:[1,32],50:[1,33],51:[1,34],52:[1,35],53:15,58:16,59:[1,25],70:14,71:[1,20],72:21,73:[1,27],74:13,75:18,76:17},{4:[2,43],41:[2,43]},{4:[2,44],41:[2,44]},{4:[2,36],41:[2,36],46:[2,36]}],
defaultActions: {2:[2,1],36:[2,2],82:[2,7],83:[2,8]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
undefined/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return (function () {}());
break;
case 1:return 47;
break;
case 2:return 47;
break;
case 3:return 'RETURN';
break;
case 4:return 43;
break;
case 5:return 'THEN';
break;
case 6:return 46;
break;
case 7:return 49;
break;
case 8:return 50;
break;
case 9:return 51;
break;
case 10:return 'NEW';
break;
case 11:return 73;
break;
case 12:return 71;
break;
case 13:return 52;
break;
case 14:return 52;
break;
case 15:return (function () {}());
break;
case 16:return 24;
break;
case 17:return 25;
break;
case 18:return 26;
break;
case 19:return 27;
break;
case 20:return 30;
break;
case 21:return 29;
break;
case 22:return 28;
break;
case 23:return 31;
break;
case 24:return 32;
break;
case 25:return 33;
break;
case 26:return 34;
break;
case 27:return 23;
break;
case 28:return 77;
break;
case 29:return 20;
break;
case 30:return 21;
break;
case 31:return 44;
break;
case 32:return 45;
break;
case 33:return 54;
break;
case 34:return 55;
break;
case 35:return 56;
break;
case 36:return 48;
break;
case 37:return 57;
break;
case 38:return 64;
break;
case 39:return 65;
break;
case 40:return 66;
break;
case 41:return 67;
break;
case 42:return 60;
break;
case 43:return 61;
break;
case 44:return 62;
break;
case 45:return 63;
break;
case 46:return 68;
break;
case 47:return 69;
break;
case 48:return 78;
break;
case 49:return 13;
break;
case 50:return 41;
break;
case 51:return 8;
break;
case 52:return 16;
break;
case 53:return 17;
break;
case 54:return 59;
break;
case 55:return 4;
break;
}
},
rules: [/^(?:\s+)/,/^(?:0[xX][a-fA-F0-9]+\b)/,/^(?:([1-9][0-9]+|[0-9])(\.[0-9]+)?([eE][-+]?[0-9]+)?\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:new\b)/,/^(?:[@$])/,/^(?:[a-zA-Z_$]\w*)/,/^(?:"(\\x[a-fA-F0-9]{2}|\\u[a-fA-F0-9]{4}|\\[^xu]|[^\\"])*")/,/^(?:'(\\[\/'\\bfnrt]|\\u[a-fA-F0-9]{4}|[^\\'])*')/,/^(?:\/\*(?:.|[\r\n])*?\*\/)/,/^(?:-=)/,/^(?:\+=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:>>>=)/,/^(?:>>=)/,/^(?:<<=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:%=)/,/^(?:=)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:===)/,/^(?:!==)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\&\&)/,/^(?:\|\|)/,/^(?:\?)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:{)/,/^(?:})/,/^(?:!)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
parser.yy = yy;

Expression.parse = (function() {
    var cache = {};
    return function(code) {
        if (cache.hasOwnProperty(code)) {
            return cache[code];
        }
        var expression = parser.parse(code);
        return cache[code] = cache['' + expression] = expression;
    };
})();
if (typeof module !== 'undefined')
    module.exports = Expression.parse;