// Generated by CoffeeScript 1.6.3
/*
© Copyright 2013 Stephan Jorek <stephan.jorek@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.
*/


(function() {
  var CHAR_asterisk, CHAR_backslash, CHAR_colon, CHAR_cr, CHAR_doublequote, CHAR_exclamation, CHAR_ff, CHAR_lf, CHAR_semicolon, CHAR_singlequote, CHAR_slash, CHAR_space, CHAR_tab, CHAR_vtab, REGEXP_isEscaped, STRING_closecomment, STRING_empty, STRING_nonimportant, UnorderedRules, exports, trim, _errors, _ref, _ref1,
    __hasProp = {}.hasOwnProperty;

  _ref = require('../Core/Constants').Constants, CHAR_space = _ref.CHAR_space, CHAR_tab = _ref.CHAR_tab, CHAR_vtab = _ref.CHAR_vtab, CHAR_cr = _ref.CHAR_cr, CHAR_lf = _ref.CHAR_lf, CHAR_ff = _ref.CHAR_ff, CHAR_doublequote = _ref.CHAR_doublequote, CHAR_singlequote = _ref.CHAR_singlequote, CHAR_slash = _ref.CHAR_slash, CHAR_backslash = _ref.CHAR_backslash, CHAR_colon = _ref.CHAR_colon, CHAR_semicolon = _ref.CHAR_semicolon, CHAR_exclamation = _ref.CHAR_exclamation, CHAR_asterisk = _ref.CHAR_asterisk, STRING_empty = _ref.STRING_empty, STRING_closecomment = _ref.STRING_closecomment, STRING_nonimportant = _ref.STRING_nonimportant, REGEXP_isEscaped = _ref.REGEXP_isEscaped;

  trim = require('../Core/Utility').Utility.trim;

  exports = (_ref1 = typeof module !== "undefined" && module !== null ? module.exports : void 0) != null ? _ref1 : this;

  exports.UnorderedRules = UnorderedRules = (function() {
    function UnorderedRules(rules, priority) {
      this.rules = rules;
      this.priority = priority;
      if (this.rules == null) {
        this.rules = {};
      }
      if (this.priority == null) {
        this.priority = {};
      }
    }

    UnorderedRules.prototype.add = function(key, value, important) {
      var exists, id;
      id = this.normalizeKey(key);
      exists = this.rules.hasOwnProperty(id);
      if (!(important === true || exists === false || this.priority.hasOwnProperty(id) === false)) {
        return this;
      }
      this.rules[id] = this.normalizeValue(value);
      if (important === true) {
        this.priority[id] = true;
      }
      return this;
    };

    UnorderedRules.prototype.each = function(fn) {
      var key, value, _ref2;
      _ref2 = this.rules;
      for (key in _ref2) {
        if (!__hasProp.call(_ref2, key)) continue;
        value = _ref2[key];
        fn(key, value, this.priority.hasOwnProperty(key));
      }
      return this;
    };

    UnorderedRules.prototype.map = function(fn) {
      var key, value, _ref2, _results;
      _ref2 = this.rules;
      _results = [];
      for (key in _ref2) {
        if (!__hasProp.call(_ref2, key)) continue;
        value = _ref2[key];
        _results.push(fn(key, value, this.priority.hasOwnProperty(key)));
      }
      return _results;
    };

    UnorderedRules.prototype.apply = function(string) {
      return UnorderedRules.parse(string, this);
    };

    UnorderedRules.prototype.inject = function(map) {
      map.project(this);
      return this;
    };

    UnorderedRules.prototype.project = function(map) {
      this.each(function(key, value, priority) {
        return map.add(key, value, priority);
      });
      return this;
    };

    UnorderedRules.prototype.normalizeKey = function(string) {
      return trim(string);
    };

    UnorderedRules.prototype.normalizeValue = function(string) {
      return trim(string);
    };

    UnorderedRules.prototype.flatten = function(fn) {
      return this.map(function(key, value, priority) {
        return [key, value, priority];
      });
    };

    UnorderedRules.prototype.toString = function() {
      var rules;
      rules = this.map(function(key, value, priority) {
        var rule;
        rule = key + CHAR_colon + value;
        if (priority === true) {
          rule += CHAR_space + STRING_nonimportant;
        }
        return rule;
      });
      return rules.implode(CHAR_semicolon);
    };

    return UnorderedRules;

  })();

  _errors = ["Unexpected content after important declaration", "Missing closing string", "Missing closing comment", "Unexpected string opener", "Missing identifier key", "Important already declared"];

  UnorderedRules.parse = function(text, _map) {
    var buffer, char, error, i, important, index, j, key, state, stateKey, stateValue, value;
    if (_map == null) {
      _map = new UnorderedRules;
    }
    i = 0;
    j = i;
    stateKey = "key";
    stateValue = "value";
    state = stateKey;
    buffer = "";
    char = "";
    key = "";
    value = "";
    important = false;
    error = function(num) {
      var msg;
      msg = _errors[num - 1];
      return msg + ":" + CHAR_lf + "“" + text.slice(0, i) + '»»»' + text.charAt(i) + '«««' + text.slice(i + 1) + "”" + CHAR_lf + ("(state: " + state + ", position: " + i + ", character: “" + char + "”)");
    };
    for (char = text.charAt(i); (char = text.charAt(i)) !== ""; i++) {;
    switch (char) {
      case CHAR_space:
      case CHAR_tab:
      case CHAR_vtab:
      case CHAR_cr:
      case CHAR_lf:
      case CHAR_ff:
        if (state === stateValue && !important) {
          buffer += char;
        }
        continue;
        break;
      case CHAR_singlequote:
      case CHAR_doublequote:
        if (important) {
          throw error(1);
        } else if (state === stateValue) {
          j = i + 1;
          while (index = text.indexOf(char, j) + 1) {
            if (text.charAt(index - 2) !== CHAR_backslash || REGEXP_isEscaped.test(text.slice(i, index - 1))) {
              break;
            }
            j = index;
          }
          if (index === 0) {
            throw error(2);
          }
          buffer += text.slice(i, index);
          i = index - 1;
          continue;
        } else {
          throw error(4);
        }
        break;
      case CHAR_slash:
        if (text.charAt(i + 1) === CHAR_asterisk) {
          i += 2;
          index = text.indexOf(STRING_closecomment, i);
          if (index === -1) {
            throw error(3);
          }
          i = index + 1;
          continue;
        } else if (important) {
          throw error(1);
        } else {
          buffer += char;
          continue;
        }
        break;
      case CHAR_colon:
        if (state === stateKey) {
          key += buffer;
          if (key === STRING_empty) {
            throw error(5);
          }
          buffer = "";
          state = stateValue;
          continue;
        } else if (important) {
          throw error(1);
        } else {
          buffer += char;
          continue;
        }
        break;
      case CHAR_exclamation:
        if (state === stateValue && text.indexOf(STRING_nonimportant, i) === i) {
          if (important) {
            throw error(6);
          }
          important = true;
          i += 9;
          continue;
        } else if (important) {
          throw error(1);
        } else {
          buffer += char;
          continue;
        }
        break;
      case CHAR_semicolon:
        if (state === stateKey) {
          continue;
        }
        if (state === stateValue) {
          value += buffer;
          _map.add(key, value, important);
          important = false;
          key = "";
          value = "";
          buffer = "";
          state = stateKey;
          continue;
        } else if (important) {
          throw error(1);
        } else {
          buffer += char;
          continue;
        }
        break;
      default:
        if (important) {
          throw error(1);
        }
        buffer += char;
        continue;
        break;
    }
    };
    if (state === stateValue) {
      _map.add(key, value + buffer, important);
    }
    return _map;
  };

}).call(this);

/*
//@ sourceMappingURL=Unordered.map
*/
